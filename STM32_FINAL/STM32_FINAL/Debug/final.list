
final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a84  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08005b90  08005b90  00006b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c38  08005c38  00007080  2**0
                  CONTENTS
  4 .ARM          00000000  08005c38  08005c38  00007080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c38  08005c38  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c38  08005c38  00006c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c3c  08005c3c  00006c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005c40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000080  08005cc0  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08005cc0  0000730c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb8c  00000000  00000000  000070a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266a  00000000  00000000  00013c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  000162a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b12  00000000  00000000  000170f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019df4  00000000  00000000  00017c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015621  00000000  00000000  000319fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008baf3  00000000  00000000  0004701f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2b12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  000d2b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  000d6ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b78 	.word	0x08005b78

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08005b78 	.word	0x08005b78

0800014c <automaticRun>:
 *      Author: ADMIN
 */

#include "FSM_automatic.h"
#include "time_set.h"
void automaticRun(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4b93      	ldr	r3, [pc, #588]	@ (80003a0 <automaticRun+0x254>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b03      	cmp	r3, #3
 8000158:	f200 8100 	bhi.w	800035c <automaticRun+0x210>
 800015c:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <automaticRun+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000175 	.word	0x08000175
 8000168:	080001d9 	.word	0x080001d9
 800016c:	080002ed 	.word	0x080002ed
 8000170:	08000285 	.word	0x08000285
	case INIT:
		if(1){
			HAL_GPIO_WritePin(LED0_0_GPIO_Port , LED0_0_Pin, GPIO_PIN_SET);
 8000174:	2201      	movs	r2, #1
 8000176:	2101      	movs	r1, #1
 8000178:	488a      	ldr	r0, [pc, #552]	@ (80003a4 <automaticRun+0x258>)
 800017a:	f001 fe9c 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED0_1_GPIO_Port , LED0_1_Pin, GPIO_PIN_SET);
 800017e:	2201      	movs	r2, #1
 8000180:	2102      	movs	r1, #2
 8000182:	4888      	ldr	r0, [pc, #544]	@ (80003a4 <automaticRun+0x258>)
 8000184:	f001 fe97 	bl	8001eb6 <HAL_GPIO_WritePin>


			HAL_GPIO_WritePin(LED1_0_GPIO_Port , LED1_0_Pin, GPIO_PIN_SET);
 8000188:	2201      	movs	r2, #1
 800018a:	2110      	movs	r1, #16
 800018c:	4885      	ldr	r0, [pc, #532]	@ (80003a4 <automaticRun+0x258>)
 800018e:	f001 fe92 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_1_GPIO_Port , LED1_1_Pin, GPIO_PIN_RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	2101      	movs	r1, #1
 8000196:	4884      	ldr	r0, [pc, #528]	@ (80003a8 <automaticRun+0x25c>)
 8000198:	f001 fe8d 	bl	8001eb6 <HAL_GPIO_WritePin>
			status = AUTO_RED;
 800019c:	4b80      	ldr	r3, [pc, #512]	@ (80003a0 <automaticRun+0x254>)
 800019e:	2202      	movs	r2, #2
 80001a0:	601a      	str	r2, [r3, #0]
			button_flag[0] = 0;
 80001a2:	4b82      	ldr	r3, [pc, #520]	@ (80003ac <automaticRun+0x260>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
			button_flag[1] = 0;
 80001a8:	4b80      	ldr	r3, [pc, #512]	@ (80003ac <automaticRun+0x260>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	605a      	str	r2, [r3, #4]
			button_flag[2] = 0;
 80001ae:	4b7f      	ldr	r3, [pc, #508]	@ (80003ac <automaticRun+0x260>)
 80001b0:	2200      	movs	r2, #0
 80001b2:	609a      	str	r2, [r3, #8]
			setTimer(1, timer_dura[1]);
 80001b4:	4b7e      	ldr	r3, [pc, #504]	@ (80003b0 <automaticRun+0x264>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4619      	mov	r1, r3
 80001ba:	2001      	movs	r0, #1
 80001bc:	f001 fa54 	bl	8001668 <setTimer>

			counter0 = redDura;
 80001c0:	4b7c      	ldr	r3, [pc, #496]	@ (80003b4 <automaticRun+0x268>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a7c      	ldr	r2, [pc, #496]	@ (80003b8 <automaticRun+0x26c>)
 80001c6:	6013      	str	r3, [r2, #0]
			counter1 = greenDura;
 80001c8:	4b7c      	ldr	r3, [pc, #496]	@ (80003bc <automaticRun+0x270>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a7c      	ldr	r2, [pc, #496]	@ (80003c0 <automaticRun+0x274>)
 80001ce:	6013      	str	r3, [r2, #0]
			countdownEnable = ENABLE;
 80001d0:	4b7c      	ldr	r3, [pc, #496]	@ (80003c4 <automaticRun+0x278>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]
	}
	break;
 80001d6:	e0c8      	b.n	800036a <automaticRun+0x21e>
	case AUTO_RED:
		if(counter0 == yellowDura) {
 80001d8:	4b77      	ldr	r3, [pc, #476]	@ (80003b8 <automaticRun+0x26c>)
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	4b7a      	ldr	r3, [pc, #488]	@ (80003c8 <automaticRun+0x27c>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d117      	bne.n	8000214 <automaticRun+0xc8>
			HAL_GPIO_WritePin(LED1_0_GPIO_Port , LED1_0_Pin, GPIO_PIN_RESET);
 80001e4:	2200      	movs	r2, #0
 80001e6:	2110      	movs	r1, #16
 80001e8:	486e      	ldr	r0, [pc, #440]	@ (80003a4 <automaticRun+0x258>)
 80001ea:	f001 fe64 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_1_GPIO_Port , LED1_1_Pin, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2101      	movs	r1, #1
 80001f2:	486d      	ldr	r0, [pc, #436]	@ (80003a8 <automaticRun+0x25c>)
 80001f4:	f001 fe5f 	bl	8001eb6 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED0_0_GPIO_Port , LED0_0_Pin, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2101      	movs	r1, #1
 80001fc:	4869      	ldr	r0, [pc, #420]	@ (80003a4 <automaticRun+0x258>)
 80001fe:	f001 fe5a 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED0_1_GPIO_Port , LED0_1_Pin, GPIO_PIN_SET);
 8000202:	2201      	movs	r2, #1
 8000204:	2102      	movs	r1, #2
 8000206:	4867      	ldr	r0, [pc, #412]	@ (80003a4 <automaticRun+0x258>)
 8000208:	f001 fe55 	bl	8001eb6 <HAL_GPIO_WritePin>
			counter1 = yellowDura;
 800020c:	4b6e      	ldr	r3, [pc, #440]	@ (80003c8 <automaticRun+0x27c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a6b      	ldr	r2, [pc, #428]	@ (80003c0 <automaticRun+0x274>)
 8000212:	6013      	str	r3, [r2, #0]
		}
		if(counter0 == 0) {
 8000214:	4b68      	ldr	r3, [pc, #416]	@ (80003b8 <automaticRun+0x26c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d11e      	bne.n	800025a <automaticRun+0x10e>
			HAL_GPIO_WritePin(LED0_0_GPIO_Port , LED0_0_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	2101      	movs	r1, #1
 8000220:	4860      	ldr	r0, [pc, #384]	@ (80003a4 <automaticRun+0x258>)
 8000222:	f001 fe48 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED0_1_GPIO_Port , LED0_1_Pin, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	485e      	ldr	r0, [pc, #376]	@ (80003a4 <automaticRun+0x258>)
 800022c:	f001 fe43 	bl	8001eb6 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED1_0_GPIO_Port , LED1_0_Pin, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2110      	movs	r1, #16
 8000234:	485b      	ldr	r0, [pc, #364]	@ (80003a4 <automaticRun+0x258>)
 8000236:	f001 fe3e 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_1_GPIO_Port , LED1_1_Pin, GPIO_PIN_SET);
 800023a:	2201      	movs	r2, #1
 800023c:	2101      	movs	r1, #1
 800023e:	485a      	ldr	r0, [pc, #360]	@ (80003a8 <automaticRun+0x25c>)
 8000240:	f001 fe39 	bl	8001eb6 <HAL_GPIO_WritePin>

			counter0 = greenDura;
 8000244:	4b5d      	ldr	r3, [pc, #372]	@ (80003bc <automaticRun+0x270>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a5b      	ldr	r2, [pc, #364]	@ (80003b8 <automaticRun+0x26c>)
 800024a:	6013      	str	r3, [r2, #0]
			counter1 = redDura;
 800024c:	4b59      	ldr	r3, [pc, #356]	@ (80003b4 <automaticRun+0x268>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a5b      	ldr	r2, [pc, #364]	@ (80003c0 <automaticRun+0x274>)
 8000252:	6013      	str	r3, [r2, #0]
			status = AUTO_GREEN;
 8000254:	4b52      	ldr	r3, [pc, #328]	@ (80003a0 <automaticRun+0x254>)
 8000256:	2204      	movs	r2, #4
 8000258:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1) == 1){
 800025a:	2001      	movs	r0, #1
 800025c:	f000 fc34 	bl	8000ac8 <isButtonPressed>
 8000260:	4603      	mov	r3, r0
 8000262:	2b01      	cmp	r3, #1
 8000264:	d17c      	bne.n	8000360 <automaticRun+0x214>
			status = MAN_INIT;
 8000266:	4b4e      	ldr	r3, [pc, #312]	@ (80003a0 <automaticRun+0x254>)
 8000268:	220b      	movs	r2, #11
 800026a:	601a      	str	r2, [r3, #0]
			countdown_save[0] = counter0;
 800026c:	4b52      	ldr	r3, [pc, #328]	@ (80003b8 <automaticRun+0x26c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a56      	ldr	r2, [pc, #344]	@ (80003cc <automaticRun+0x280>)
 8000272:	6013      	str	r3, [r2, #0]
			countdown_save[1] = counter1;
 8000274:	4b52      	ldr	r3, [pc, #328]	@ (80003c0 <automaticRun+0x274>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a54      	ldr	r2, [pc, #336]	@ (80003cc <automaticRun+0x280>)
 800027a:	6053      	str	r3, [r2, #4]
			countdownEnable = DISABLE;//DISABLE COUTDOWN
 800027c:	4b51      	ldr	r3, [pc, #324]	@ (80003c4 <automaticRun+0x278>)
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
		}
		break;
 8000282:	e06d      	b.n	8000360 <automaticRun+0x214>
	case AUTO_GREEN:
		if(counter0 == 0) {
 8000284:	4b4c      	ldr	r3, [pc, #304]	@ (80003b8 <automaticRun+0x26c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d11a      	bne.n	80002c2 <automaticRun+0x176>
			HAL_GPIO_WritePin(LED0_0_GPIO_Port , LED0_0_Pin, GPIO_PIN_RESET);
 800028c:	2200      	movs	r2, #0
 800028e:	2101      	movs	r1, #1
 8000290:	4844      	ldr	r0, [pc, #272]	@ (80003a4 <automaticRun+0x258>)
 8000292:	f001 fe10 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED0_1_GPIO_Port , LED0_1_Pin, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2102      	movs	r1, #2
 800029a:	4842      	ldr	r0, [pc, #264]	@ (80003a4 <automaticRun+0x258>)
 800029c:	f001 fe0b 	bl	8001eb6 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED1_0_GPIO_Port , LED1_0_Pin, GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2110      	movs	r1, #16
 80002a4:	483f      	ldr	r0, [pc, #252]	@ (80003a4 <automaticRun+0x258>)
 80002a6:	f001 fe06 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_1_GPIO_Port , LED1_1_Pin, GPIO_PIN_SET);
 80002aa:	2201      	movs	r2, #1
 80002ac:	2101      	movs	r1, #1
 80002ae:	483e      	ldr	r0, [pc, #248]	@ (80003a8 <automaticRun+0x25c>)
 80002b0:	f001 fe01 	bl	8001eb6 <HAL_GPIO_WritePin>
			counter0 = yellowDura;
 80002b4:	4b44      	ldr	r3, [pc, #272]	@ (80003c8 <automaticRun+0x27c>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a3f      	ldr	r2, [pc, #252]	@ (80003b8 <automaticRun+0x26c>)
 80002ba:	6013      	str	r3, [r2, #0]
			status = AUTO_AMBER;
 80002bc:	4b38      	ldr	r3, [pc, #224]	@ (80003a0 <automaticRun+0x254>)
 80002be:	2203      	movs	r2, #3
 80002c0:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(1) == 1){
 80002c2:	2001      	movs	r0, #1
 80002c4:	f000 fc00 	bl	8000ac8 <isButtonPressed>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b01      	cmp	r3, #1
 80002cc:	d14a      	bne.n	8000364 <automaticRun+0x218>
			status = MAN_INIT;
 80002ce:	4b34      	ldr	r3, [pc, #208]	@ (80003a0 <automaticRun+0x254>)
 80002d0:	220b      	movs	r2, #11
 80002d2:	601a      	str	r2, [r3, #0]
			countdown_save[0] = counter0;
 80002d4:	4b38      	ldr	r3, [pc, #224]	@ (80003b8 <automaticRun+0x26c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a3c      	ldr	r2, [pc, #240]	@ (80003cc <automaticRun+0x280>)
 80002da:	6013      	str	r3, [r2, #0]
			countdown_save[1] = counter1;
 80002dc:	4b38      	ldr	r3, [pc, #224]	@ (80003c0 <automaticRun+0x274>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a3a      	ldr	r2, [pc, #232]	@ (80003cc <automaticRun+0x280>)
 80002e2:	6053      	str	r3, [r2, #4]
			countdownEnable = DISABLE;
 80002e4:	4b37      	ldr	r3, [pc, #220]	@ (80003c4 <automaticRun+0x278>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
		}
		break;
 80002ea:	e03b      	b.n	8000364 <automaticRun+0x218>
	case AUTO_AMBER:
		if(counter0 == 0) {
 80002ec:	4b32      	ldr	r3, [pc, #200]	@ (80003b8 <automaticRun+0x26c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d11e      	bne.n	8000332 <automaticRun+0x1e6>
			HAL_GPIO_WritePin(LED0_0_GPIO_Port , LED0_0_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2101      	movs	r1, #1
 80002f8:	482a      	ldr	r0, [pc, #168]	@ (80003a4 <automaticRun+0x258>)
 80002fa:	f001 fddc 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED0_1_GPIO_Port , LED0_1_Pin, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4828      	ldr	r0, [pc, #160]	@ (80003a4 <automaticRun+0x258>)
 8000304:	f001 fdd7 	bl	8001eb6 <HAL_GPIO_WritePin>


			HAL_GPIO_WritePin(LED1_0_GPIO_Port , LED1_0_Pin, GPIO_PIN_SET);
 8000308:	2201      	movs	r2, #1
 800030a:	2110      	movs	r1, #16
 800030c:	4825      	ldr	r0, [pc, #148]	@ (80003a4 <automaticRun+0x258>)
 800030e:	f001 fdd2 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED1_1_GPIO_Port , LED1_1_Pin, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2101      	movs	r1, #1
 8000316:	4824      	ldr	r0, [pc, #144]	@ (80003a8 <automaticRun+0x25c>)
 8000318:	f001 fdcd 	bl	8001eb6 <HAL_GPIO_WritePin>

			counter0 = redDura;
 800031c:	4b25      	ldr	r3, [pc, #148]	@ (80003b4 <automaticRun+0x268>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a25      	ldr	r2, [pc, #148]	@ (80003b8 <automaticRun+0x26c>)
 8000322:	6013      	str	r3, [r2, #0]
			counter1 = greenDura;
 8000324:	4b25      	ldr	r3, [pc, #148]	@ (80003bc <automaticRun+0x270>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a25      	ldr	r2, [pc, #148]	@ (80003c0 <automaticRun+0x274>)
 800032a:	6013      	str	r3, [r2, #0]
			status = AUTO_RED;
 800032c:	4b1c      	ldr	r3, [pc, #112]	@ (80003a0 <automaticRun+0x254>)
 800032e:	2202      	movs	r2, #2
 8000330:	601a      	str	r2, [r3, #0]

		}
		if(isButtonPressed(1) == 1){
 8000332:	2001      	movs	r0, #1
 8000334:	f000 fbc8 	bl	8000ac8 <isButtonPressed>
 8000338:	4603      	mov	r3, r0
 800033a:	2b01      	cmp	r3, #1
 800033c:	d114      	bne.n	8000368 <automaticRun+0x21c>
			status = MAN_INIT;
 800033e:	4b18      	ldr	r3, [pc, #96]	@ (80003a0 <automaticRun+0x254>)
 8000340:	220b      	movs	r2, #11
 8000342:	601a      	str	r2, [r3, #0]
			countdown_save[0] = counter0;
 8000344:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <automaticRun+0x26c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a20      	ldr	r2, [pc, #128]	@ (80003cc <automaticRun+0x280>)
 800034a:	6013      	str	r3, [r2, #0]
			countdown_save[1] = counter1;
 800034c:	4b1c      	ldr	r3, [pc, #112]	@ (80003c0 <automaticRun+0x274>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a1e      	ldr	r2, [pc, #120]	@ (80003cc <automaticRun+0x280>)
 8000352:	6053      	str	r3, [r2, #4]
			countdownEnable = DISABLE;
 8000354:	4b1b      	ldr	r3, [pc, #108]	@ (80003c4 <automaticRun+0x278>)
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
		}
		break;
 800035a:	e005      	b.n	8000368 <automaticRun+0x21c>
	default:
		break;
 800035c:	bf00      	nop
 800035e:	e004      	b.n	800036a <automaticRun+0x21e>
		break;
 8000360:	bf00      	nop
 8000362:	e002      	b.n	800036a <automaticRun+0x21e>
		break;
 8000364:	bf00      	nop
 8000366:	e000      	b.n	800036a <automaticRun+0x21e>
		break;
 8000368:	bf00      	nop
	}
	if(timer_flag[1] == 1 && countdownEnable)
 800036a:	4b19      	ldr	r3, [pc, #100]	@ (80003d0 <automaticRun+0x284>)
 800036c:	685b      	ldr	r3, [r3, #4]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d113      	bne.n	800039a <automaticRun+0x24e>
 8000372:	4b14      	ldr	r3, [pc, #80]	@ (80003c4 <automaticRun+0x278>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d00f      	beq.n	800039a <automaticRun+0x24e>
	{
		counter0 --;
 800037a:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <automaticRun+0x26c>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	3b01      	subs	r3, #1
 8000380:	4a0d      	ldr	r2, [pc, #52]	@ (80003b8 <automaticRun+0x26c>)
 8000382:	6013      	str	r3, [r2, #0]
		counter1 --;
 8000384:	4b0e      	ldr	r3, [pc, #56]	@ (80003c0 <automaticRun+0x274>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	3b01      	subs	r3, #1
 800038a:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <automaticRun+0x274>)
 800038c:	6013      	str	r3, [r2, #0]
		setTimer(1, timer_dura[1]);
 800038e:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <automaticRun+0x264>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4619      	mov	r1, r3
 8000394:	2001      	movs	r0, #1
 8000396:	f001 f967 	bl	8001668 <setTimer>
	}
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	200000e0 	.word	0x200000e0
 80003a4:	40010800 	.word	0x40010800
 80003a8:	40010c00 	.word	0x40010c00
 80003ac:	200000ac 	.word	0x200000ac
 80003b0:	20000014 	.word	0x20000014
 80003b4:	20000000 	.word	0x20000000
 80003b8:	200000e4 	.word	0x200000e4
 80003bc:	20000004 	.word	0x20000004
 80003c0:	200000e8 	.word	0x200000e8
 80003c4:	2000000c 	.word	0x2000000c
 80003c8:	20000008 	.word	0x20000008
 80003cc:	200000ec 	.word	0x200000ec
 80003d0:	200001ac 	.word	0x200001ac

080003d4 <manual_run>:
#include "FSM_manual.h"
void init_manual(){

}

void manual_run(){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	switch(status){
 80003d8:	4b9e      	ldr	r3, [pc, #632]	@ (8000654 <manual_run+0x280>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	3b0b      	subs	r3, #11
 80003de:	2b03      	cmp	r3, #3
 80003e0:	f200 818f 	bhi.w	8000702 <manual_run+0x32e>
 80003e4:	a201      	add	r2, pc, #4	@ (adr r2, 80003ec <manual_run+0x18>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000447 	.word	0x08000447
 80003f4:	080005f9 	.word	0x080005f9
 80003f8:	08000531 	.word	0x08000531
	case MAN_INIT:
		HAL_GPIO_WritePin(LED1_0_GPIO_Port , LED1_0_Pin, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2110      	movs	r1, #16
 8000400:	4895      	ldr	r0, [pc, #596]	@ (8000658 <manual_run+0x284>)
 8000402:	f001 fd58 	bl	8001eb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_1_GPIO_Port , LED1_1_Pin, GPIO_PIN_RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	4894      	ldr	r0, [pc, #592]	@ (800065c <manual_run+0x288>)
 800040c:	f001 fd53 	bl	8001eb6 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(LED0_0_GPIO_Port , LED0_0_Pin, GPIO_PIN_RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2101      	movs	r1, #1
 8000414:	4890      	ldr	r0, [pc, #576]	@ (8000658 <manual_run+0x284>)
 8000416:	f001 fd4e 	bl	8001eb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_1_GPIO_Port , LED0_1_Pin, GPIO_PIN_RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2102      	movs	r1, #2
 800041e:	488e      	ldr	r0, [pc, #568]	@ (8000658 <manual_run+0x284>)
 8000420:	f001 fd49 	bl	8001eb6 <HAL_GPIO_WritePin>
		status = MAN_RED;
 8000424:	4b8b      	ldr	r3, [pc, #556]	@ (8000654 <manual_run+0x280>)
 8000426:	220c      	movs	r2, #12
 8000428:	601a      	str	r2, [r3, #0]
		counter0 = redDura;
 800042a:	4b8d      	ldr	r3, [pc, #564]	@ (8000660 <manual_run+0x28c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a8d      	ldr	r2, [pc, #564]	@ (8000664 <manual_run+0x290>)
 8000430:	6013      	str	r3, [r2, #0]
		counter1 = MAN_RED % 10;
 8000432:	4b8d      	ldr	r3, [pc, #564]	@ (8000668 <manual_run+0x294>)
 8000434:	2202      	movs	r2, #2
 8000436:	601a      	str	r2, [r3, #0]
		setTimer(2, timer_dura[2]);
 8000438:	4b8c      	ldr	r3, [pc, #560]	@ (800066c <manual_run+0x298>)
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	4619      	mov	r1, r3
 800043e:	2002      	movs	r0, #2
 8000440:	f001 f912 	bl	8001668 <setTimer>
		break;
 8000444:	e164      	b.n	8000710 <manual_run+0x33c>
	case MAN_RED:
		if(isButtonPressed(1))
 8000446:	2001      	movs	r0, #1
 8000448:	f000 fb3e 	bl	8000ac8 <isButtonPressed>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d00f      	beq.n	8000472 <manual_run+0x9e>
		{
			status = MAN_GREEN;
 8000452:	4b80      	ldr	r3, [pc, #512]	@ (8000654 <manual_run+0x280>)
 8000454:	220d      	movs	r2, #13
 8000456:	601a      	str	r2, [r3, #0]
			counter0 = greenDura;
 8000458:	4b85      	ldr	r3, [pc, #532]	@ (8000670 <manual_run+0x29c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a81      	ldr	r2, [pc, #516]	@ (8000664 <manual_run+0x290>)
 800045e:	6013      	str	r3, [r2, #0]
			counter1 = MAN_GREEN % 10;
 8000460:	4b81      	ldr	r3, [pc, #516]	@ (8000668 <manual_run+0x294>)
 8000462:	2203      	movs	r2, #3
 8000464:	601a      	str	r2, [r3, #0]
			setTimer(2, timer_dura[2]);
 8000466:	4b81      	ldr	r3, [pc, #516]	@ (800066c <manual_run+0x298>)
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	4619      	mov	r1, r3
 800046c:	2002      	movs	r0, #2
 800046e:	f001 f8fb 	bl	8001668 <setTimer>
		}
		if(isButtonPressed(2))
 8000472:	2002      	movs	r0, #2
 8000474:	f000 fb28 	bl	8000ac8 <isButtonPressed>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d00b      	beq.n	8000496 <manual_run+0xc2>
		{
			counter0 ++;
 800047e:	4b79      	ldr	r3, [pc, #484]	@ (8000664 <manual_run+0x290>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	3301      	adds	r3, #1
 8000484:	4a77      	ldr	r2, [pc, #476]	@ (8000664 <manual_run+0x290>)
 8000486:	6013      	str	r3, [r2, #0]
			setTimer(2, timer_dura[2]);
 8000488:	4b78      	ldr	r3, [pc, #480]	@ (800066c <manual_run+0x298>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	4619      	mov	r1, r3
 800048e:	2002      	movs	r0, #2
 8000490:	f001 f8ea 	bl	8001668 <setTimer>
 8000494:	e014      	b.n	80004c0 <manual_run+0xec>
		}
		else if(isButtonHold(2))
 8000496:	2002      	movs	r0, #2
 8000498:	f000 fb32 	bl	8000b00 <isButtonHold>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d00e      	beq.n	80004c0 <manual_run+0xec>
		{
			if(timer_flag[3] == 1){
 80004a2:	4b74      	ldr	r3, [pc, #464]	@ (8000674 <manual_run+0x2a0>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d10a      	bne.n	80004c0 <manual_run+0xec>
				counter0 ++;
 80004aa:	4b6e      	ldr	r3, [pc, #440]	@ (8000664 <manual_run+0x290>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	3301      	adds	r3, #1
 80004b0:	4a6c      	ldr	r2, [pc, #432]	@ (8000664 <manual_run+0x290>)
 80004b2:	6013      	str	r3, [r2, #0]
				setTimer(3, timer_dura[3]);
 80004b4:	4b6d      	ldr	r3, [pc, #436]	@ (800066c <manual_run+0x298>)
 80004b6:	68db      	ldr	r3, [r3, #12]
 80004b8:	4619      	mov	r1, r3
 80004ba:	2003      	movs	r0, #3
 80004bc:	f001 f8d4 	bl	8001668 <setTimer>
			}
		}
		if(isButtonPressed(3)){
 80004c0:	2003      	movs	r0, #3
 80004c2:	f000 fb01 	bl	8000ac8 <isButtonPressed>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d01d      	beq.n	8000508 <manual_run+0x134>
			//ENABLE COUTDOWN FOR AUTO_TRAFFIC_LIGHT
			greenDura += counter0 - redDura;
 80004cc:	4b65      	ldr	r3, [pc, #404]	@ (8000664 <manual_run+0x290>)
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	4b63      	ldr	r3, [pc, #396]	@ (8000660 <manual_run+0x28c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1ad2      	subs	r2, r2, r3
 80004d6:	4b66      	ldr	r3, [pc, #408]	@ (8000670 <manual_run+0x29c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4413      	add	r3, r2
 80004dc:	4a64      	ldr	r2, [pc, #400]	@ (8000670 <manual_run+0x29c>)
 80004de:	6013      	str	r3, [r2, #0]
			redDura = counter0;
 80004e0:	4b60      	ldr	r3, [pc, #384]	@ (8000664 <manual_run+0x290>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a5e      	ldr	r2, [pc, #376]	@ (8000660 <manual_run+0x28c>)
 80004e6:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED0_0_GPIO_Port, LED0_0_Pin, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2101      	movs	r1, #1
 80004ec:	485a      	ldr	r0, [pc, #360]	@ (8000658 <manual_run+0x284>)
 80004ee:	f001 fce2 	bl	8001eb6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED0_1_GPIO_Port, LED0_1_Pin, GPIO_PIN_SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2102      	movs	r1, #2
 80004f6:	4858      	ldr	r0, [pc, #352]	@ (8000658 <manual_run+0x284>)
 80004f8:	f001 fcdd 	bl	8001eb6 <HAL_GPIO_WritePin>
			setTimer(2,timer_dura[4]);
 80004fc:	4b5b      	ldr	r3, [pc, #364]	@ (800066c <manual_run+0x298>)
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	4619      	mov	r1, r3
 8000502:	2002      	movs	r0, #2
 8000504:	f001 f8b0 	bl	8001668 <setTimer>
		}
		if(timer_flag[2] == 1){
 8000508:	4b5a      	ldr	r3, [pc, #360]	@ (8000674 <manual_run+0x2a0>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	2b01      	cmp	r3, #1
 800050e:	f040 80fa 	bne.w	8000706 <manual_run+0x332>
			HAL_GPIO_TogglePin(LED0_0_GPIO_Port, LED0_0_Pin);
 8000512:	2101      	movs	r1, #1
 8000514:	4850      	ldr	r0, [pc, #320]	@ (8000658 <manual_run+0x284>)
 8000516:	f001 fce6 	bl	8001ee6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED0_1_GPIO_Port, LED0_1_Pin);
 800051a:	2102      	movs	r1, #2
 800051c:	484e      	ldr	r0, [pc, #312]	@ (8000658 <manual_run+0x284>)
 800051e:	f001 fce2 	bl	8001ee6 <HAL_GPIO_TogglePin>
			setTimer(2, timer_dura[2]);
 8000522:	4b52      	ldr	r3, [pc, #328]	@ (800066c <manual_run+0x298>)
 8000524:	689b      	ldr	r3, [r3, #8]
 8000526:	4619      	mov	r1, r3
 8000528:	2002      	movs	r0, #2
 800052a:	f001 f89d 	bl	8001668 <setTimer>
		}

		break;
 800052e:	e0ea      	b.n	8000706 <manual_run+0x332>
	case MAN_AMBER:
		HAL_GPIO_WritePin(LED0_0_GPIO_Port, LED0_0_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2101      	movs	r1, #1
 8000534:	4848      	ldr	r0, [pc, #288]	@ (8000658 <manual_run+0x284>)
 8000536:	f001 fcbe 	bl	8001eb6 <HAL_GPIO_WritePin>
		if(isButtonPressed(1)){
 800053a:	2001      	movs	r0, #1
 800053c:	f000 fac4 	bl	8000ac8 <isButtonPressed>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <manual_run+0x178>
			status = INIT;
 8000546:	4b43      	ldr	r3, [pc, #268]	@ (8000654 <manual_run+0x280>)
 8000548:	2201      	movs	r2, #1
 800054a:	601a      	str	r2, [r3, #0]
		}
		if(isButtonPressed(2))
 800054c:	2002      	movs	r0, #2
 800054e:	f000 fabb 	bl	8000ac8 <isButtonPressed>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d00b      	beq.n	8000570 <manual_run+0x19c>
		{
			counter0 ++;
 8000558:	4b42      	ldr	r3, [pc, #264]	@ (8000664 <manual_run+0x290>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a41      	ldr	r2, [pc, #260]	@ (8000664 <manual_run+0x290>)
 8000560:	6013      	str	r3, [r2, #0]
			setTimer(2, timer_dura[2]);
 8000562:	4b42      	ldr	r3, [pc, #264]	@ (800066c <manual_run+0x298>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	4619      	mov	r1, r3
 8000568:	2002      	movs	r0, #2
 800056a:	f001 f87d 	bl	8001668 <setTimer>
 800056e:	e014      	b.n	800059a <manual_run+0x1c6>
		}
		else if(isButtonHold(2))
 8000570:	2002      	movs	r0, #2
 8000572:	f000 fac5 	bl	8000b00 <isButtonHold>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d00e      	beq.n	800059a <manual_run+0x1c6>
		{
			if(timer_flag[3] == 1){
 800057c:	4b3d      	ldr	r3, [pc, #244]	@ (8000674 <manual_run+0x2a0>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d10a      	bne.n	800059a <manual_run+0x1c6>
				counter0 ++;
 8000584:	4b37      	ldr	r3, [pc, #220]	@ (8000664 <manual_run+0x290>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	4a36      	ldr	r2, [pc, #216]	@ (8000664 <manual_run+0x290>)
 800058c:	6013      	str	r3, [r2, #0]
				setTimer(3, timer_dura[3]);
 800058e:	4b37      	ldr	r3, [pc, #220]	@ (800066c <manual_run+0x298>)
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	4619      	mov	r1, r3
 8000594:	2003      	movs	r0, #3
 8000596:	f001 f867 	bl	8001668 <setTimer>
			}
		}
		if(isButtonPressed(3)){
 800059a:	2003      	movs	r0, #3
 800059c:	f000 fa94 	bl	8000ac8 <isButtonPressed>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d018      	beq.n	80005d8 <manual_run+0x204>
			redDura += counter0 - yellowDura;
 80005a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000664 <manual_run+0x290>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	4b33      	ldr	r3, [pc, #204]	@ (8000678 <manual_run+0x2a4>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	1ad2      	subs	r2, r2, r3
 80005b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <manual_run+0x28c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4413      	add	r3, r2
 80005b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000660 <manual_run+0x28c>)
 80005b8:	6013      	str	r3, [r2, #0]
			yellowDura = counter0;
 80005ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <manual_run+0x290>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a2e      	ldr	r2, [pc, #184]	@ (8000678 <manual_run+0x2a4>)
 80005c0:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED0_1_GPIO_Port, LED0_1_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2102      	movs	r1, #2
 80005c6:	4824      	ldr	r0, [pc, #144]	@ (8000658 <manual_run+0x284>)
 80005c8:	f001 fc75 	bl	8001eb6 <HAL_GPIO_WritePin>
			setTimer(2,timer_dura[4]);
 80005cc:	4b27      	ldr	r3, [pc, #156]	@ (800066c <manual_run+0x298>)
 80005ce:	691b      	ldr	r3, [r3, #16]
 80005d0:	4619      	mov	r1, r3
 80005d2:	2002      	movs	r0, #2
 80005d4:	f001 f848 	bl	8001668 <setTimer>
		}
		if(timer_flag[2] == 1){
 80005d8:	4b26      	ldr	r3, [pc, #152]	@ (8000674 <manual_run+0x2a0>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	f040 8094 	bne.w	800070a <manual_run+0x336>
			HAL_GPIO_TogglePin(LED0_1_GPIO_Port, LED0_1_Pin);
 80005e2:	2102      	movs	r1, #2
 80005e4:	481c      	ldr	r0, [pc, #112]	@ (8000658 <manual_run+0x284>)
 80005e6:	f001 fc7e 	bl	8001ee6 <HAL_GPIO_TogglePin>
			setTimer(2, timer_dura[2]);
 80005ea:	4b20      	ldr	r3, [pc, #128]	@ (800066c <manual_run+0x298>)
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	4619      	mov	r1, r3
 80005f0:	2002      	movs	r0, #2
 80005f2:	f001 f839 	bl	8001668 <setTimer>
		}
		break;
 80005f6:	e088      	b.n	800070a <manual_run+0x336>
	case MAN_GREEN:
		HAL_GPIO_WritePin(LED0_1_GPIO_Port, LED0_1_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2102      	movs	r1, #2
 80005fc:	4816      	ldr	r0, [pc, #88]	@ (8000658 <manual_run+0x284>)
 80005fe:	f001 fc5a 	bl	8001eb6 <HAL_GPIO_WritePin>

		if(isButtonPressed(1)){
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fa60 	bl	8000ac8 <isButtonPressed>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00f      	beq.n	800062e <manual_run+0x25a>
			status = MAN_AMBER;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <manual_run+0x280>)
 8000610:	220e      	movs	r2, #14
 8000612:	601a      	str	r2, [r3, #0]
			counter0 = yellowDura;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <manual_run+0x2a4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <manual_run+0x290>)
 800061a:	6013      	str	r3, [r2, #0]
			counter1 = MAN_AMBER % 10;
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <manual_run+0x294>)
 800061e:	2204      	movs	r2, #4
 8000620:	601a      	str	r2, [r3, #0]
			setTimer(2, timer_dura[2]);
 8000622:	4b12      	ldr	r3, [pc, #72]	@ (800066c <manual_run+0x298>)
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	4619      	mov	r1, r3
 8000628:	2002      	movs	r0, #2
 800062a:	f001 f81d 	bl	8001668 <setTimer>
		}
		if(isButtonPressed(2))
 800062e:	2002      	movs	r0, #2
 8000630:	f000 fa4a 	bl	8000ac8 <isButtonPressed>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d020      	beq.n	800067c <manual_run+0x2a8>
		{
			counter0 ++;
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <manual_run+0x290>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	4a08      	ldr	r2, [pc, #32]	@ (8000664 <manual_run+0x290>)
 8000642:	6013      	str	r3, [r2, #0]
			setTimer(2, timer_dura[2]);
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <manual_run+0x298>)
 8000646:	689b      	ldr	r3, [r3, #8]
 8000648:	4619      	mov	r1, r3
 800064a:	2002      	movs	r0, #2
 800064c:	f001 f80c 	bl	8001668 <setTimer>
 8000650:	e029      	b.n	80006a6 <manual_run+0x2d2>
 8000652:	bf00      	nop
 8000654:	200000e0 	.word	0x200000e0
 8000658:	40010800 	.word	0x40010800
 800065c:	40010c00 	.word	0x40010c00
 8000660:	20000000 	.word	0x20000000
 8000664:	200000e4 	.word	0x200000e4
 8000668:	200000e8 	.word	0x200000e8
 800066c:	20000014 	.word	0x20000014
 8000670:	20000004 	.word	0x20000004
 8000674:	200001ac 	.word	0x200001ac
 8000678:	20000008 	.word	0x20000008
		}
		else if(isButtonHold(2))
 800067c:	2002      	movs	r0, #2
 800067e:	f000 fa3f 	bl	8000b00 <isButtonHold>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00e      	beq.n	80006a6 <manual_run+0x2d2>
		{
			if(timer_flag[3] == 1){
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <manual_run+0x340>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d10a      	bne.n	80006a6 <manual_run+0x2d2>
				counter0 ++;
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <manual_run+0x344>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <manual_run+0x344>)
 8000698:	6013      	str	r3, [r2, #0]
				setTimer(3, timer_dura[3]);
 800069a:	4b20      	ldr	r3, [pc, #128]	@ (800071c <manual_run+0x348>)
 800069c:	68db      	ldr	r3, [r3, #12]
 800069e:	4619      	mov	r1, r3
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 ffe1 	bl	8001668 <setTimer>
			}
		}
		if(isButtonPressed(3)){
 80006a6:	2003      	movs	r0, #3
 80006a8:	f000 fa0e 	bl	8000ac8 <isButtonPressed>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d018      	beq.n	80006e4 <manual_run+0x310>
			redDura += counter0 - greenDura;
 80006b2:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <manual_run+0x344>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000720 <manual_run+0x34c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	1ad2      	subs	r2, r2, r3
 80006bc:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <manual_run+0x350>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <manual_run+0x350>)
 80006c4:	6013      	str	r3, [r2, #0]
			greenDura = counter0;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <manual_run+0x344>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a15      	ldr	r2, [pc, #84]	@ (8000720 <manual_run+0x34c>)
 80006cc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(LED0_0_GPIO_Port, LED0_0_Pin, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2101      	movs	r1, #1
 80006d2:	4815      	ldr	r0, [pc, #84]	@ (8000728 <manual_run+0x354>)
 80006d4:	f001 fbef 	bl	8001eb6 <HAL_GPIO_WritePin>
			setTimer(2,timer_dura[4]);
 80006d8:	4b10      	ldr	r3, [pc, #64]	@ (800071c <manual_run+0x348>)
 80006da:	691b      	ldr	r3, [r3, #16]
 80006dc:	4619      	mov	r1, r3
 80006de:	2002      	movs	r0, #2
 80006e0:	f000 ffc2 	bl	8001668 <setTimer>
		}
		if(timer_flag[2] == 1){
 80006e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <manual_run+0x340>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d110      	bne.n	800070e <manual_run+0x33a>
			HAL_GPIO_TogglePin(LED0_0_GPIO_Port, LED0_0_Pin);
 80006ec:	2101      	movs	r1, #1
 80006ee:	480e      	ldr	r0, [pc, #56]	@ (8000728 <manual_run+0x354>)
 80006f0:	f001 fbf9 	bl	8001ee6 <HAL_GPIO_TogglePin>
			setTimer(2, timer_dura[2]);
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <manual_run+0x348>)
 80006f6:	689b      	ldr	r3, [r3, #8]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2002      	movs	r0, #2
 80006fc:	f000 ffb4 	bl	8001668 <setTimer>
		}
		break;
 8000700:	e005      	b.n	800070e <manual_run+0x33a>
	default:
		break;
 8000702:	bf00      	nop
 8000704:	e004      	b.n	8000710 <manual_run+0x33c>
		break;
 8000706:	bf00      	nop
 8000708:	e002      	b.n	8000710 <manual_run+0x33c>
		break;
 800070a:	bf00      	nop
 800070c:	e000      	b.n	8000710 <manual_run+0x33c>
		break;
 800070e:	bf00      	nop
	}

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200001ac 	.word	0x200001ac
 8000718:	200000e4 	.word	0x200000e4
 800071c:	20000014 	.word	0x20000014
 8000720:	20000004 	.word	0x20000004
 8000724:	20000000 	.word	0x20000000
 8000728:	40010800 	.word	0x40010800

0800072c <pressProcess>:
static GPIO_PinState buttonBounce3[BUTTON_NUM];
int button_flag[BUTTON_NUM];
int button_hold[BUTTON_NUM];
int keyPressCounter[BUTTON_NUM];
void pressProcess(int i)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000734:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <pressProcess+0x28>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2101      	movs	r1, #1
 800073a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_hold[i] = 0;
 800073e:	4a06      	ldr	r2, [pc, #24]	@ (8000758 <pressProcess+0x2c>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2100      	movs	r1, #0
 8000744:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return;
 8000748:	bf00      	nop
}
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	200000ac 	.word	0x200000ac
 8000758:	200000b8 	.word	0x200000b8

0800075c <holdProcess>:
void holdProcess(int i)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	button_flag[i] = 0;
 8000764:	4a07      	ldr	r2, [pc, #28]	@ (8000784 <holdProcess+0x28>)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2100      	movs	r1, #0
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_hold[i] = 1;
 800076e:	4a06      	ldr	r2, [pc, #24]	@ (8000788 <holdProcess+0x2c>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2101      	movs	r1, #1
 8000774:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return;
 8000778:	bf00      	nop
}
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	200000ac 	.word	0x200000ac
 8000788:	200000b8 	.word	0x200000b8

0800078c <normalProcess>:
void normalProcess(int i)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	button_flag[i] = 0;
 8000794:	4a07      	ldr	r2, [pc, #28]	@ (80007b4 <normalProcess+0x28>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2100      	movs	r1, #0
 800079a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	button_hold[i] = 0;
 800079e:	4a06      	ldr	r2, [pc, #24]	@ (80007b8 <normalProcess+0x2c>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2100      	movs	r1, #0
 80007a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	return;
 80007a8:	bf00      	nop
}
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	200000ac 	.word	0x200000ac
 80007b8:	200000b8 	.word	0x200000b8

080007bc <buttonReading>:
 void buttonReading(){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	 for(int i = 0; i < BUTTON_NUM; i ++ ){
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	e172      	b.n	8000aae <buttonReading+0x2f2>
		 buttonBounce1[i] = buttonBounce2[i];
 80007c8:	4a97      	ldr	r2, [pc, #604]	@ (8000a28 <buttonReading+0x26c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	7819      	ldrb	r1, [r3, #0]
 80007d0:	4a96      	ldr	r2, [pc, #600]	@ (8000a2c <buttonReading+0x270>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4413      	add	r3, r2
 80007d6:	460a      	mov	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
		 buttonBounce2[i] = buttonBuffer[i];
 80007da:	4a95      	ldr	r2, [pc, #596]	@ (8000a30 <buttonReading+0x274>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	7819      	ldrb	r1, [r3, #0]
 80007e2:	4a91      	ldr	r2, [pc, #580]	@ (8000a28 <buttonReading+0x26c>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	460a      	mov	r2, r1
 80007ea:	701a      	strb	r2, [r3, #0]
		 switch(i)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	f000 80de 	beq.w	80009b0 <buttonReading+0x1f4>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	f300 814f 	bgt.w	8000a9a <buttonReading+0x2de>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d003      	beq.n	800080a <buttonReading+0x4e>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d06c      	beq.n	80008e2 <buttonReading+0x126>
			 				 }
			 			 }
			 		 }
			 break;
		 default:
		 	 break;
 8000808:	e147      	b.n	8000a9a <buttonReading+0x2de>
			 buttonBuffer[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 800080a:	2108      	movs	r1, #8
 800080c:	4889      	ldr	r0, [pc, #548]	@ (8000a34 <buttonReading+0x278>)
 800080e:	f001 fb3b 	bl	8001e88 <HAL_GPIO_ReadPin>
 8000812:	4603      	mov	r3, r0
 8000814:	4619      	mov	r1, r3
 8000816:	4a86      	ldr	r2, [pc, #536]	@ (8000a30 <buttonReading+0x274>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	460a      	mov	r2, r1
 800081e:	701a      	strb	r2, [r3, #0]
			 if((buttonBounce1[i] == buttonBounce2[i]) && (buttonBounce2[i] == buttonBuffer[i])){
 8000820:	4a82      	ldr	r2, [pc, #520]	@ (8000a2c <buttonReading+0x270>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	497f      	ldr	r1, [pc, #508]	@ (8000a28 <buttonReading+0x26c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	440b      	add	r3, r1
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	f040 8134 	bne.w	8000a9e <buttonReading+0x2e2>
 8000836:	4a7c      	ldr	r2, [pc, #496]	@ (8000a28 <buttonReading+0x26c>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4413      	add	r3, r2
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	497c      	ldr	r1, [pc, #496]	@ (8000a30 <buttonReading+0x274>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	440b      	add	r3, r1
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	f040 8129 	bne.w	8000a9e <buttonReading+0x2e2>
			 			 if(buttonBounce3[i] != buttonBuffer[i]){
 800084c:	4a7a      	ldr	r2, [pc, #488]	@ (8000a38 <buttonReading+0x27c>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4413      	add	r3, r2
 8000852:	781a      	ldrb	r2, [r3, #0]
 8000854:	4976      	ldr	r1, [pc, #472]	@ (8000a30 <buttonReading+0x274>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	440b      	add	r3, r1
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	429a      	cmp	r2, r3
 800085e:	d021      	beq.n	80008a4 <buttonReading+0xe8>
			 				 buttonBounce3[i] = buttonBuffer[i];
 8000860:	4a73      	ldr	r2, [pc, #460]	@ (8000a30 <buttonReading+0x274>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	7819      	ldrb	r1, [r3, #0]
 8000868:	4a73      	ldr	r2, [pc, #460]	@ (8000a38 <buttonReading+0x27c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	460a      	mov	r2, r1
 8000870:	701a      	strb	r2, [r3, #0]
			 				 if(buttonBuffer[i] == PRESSED_STATE){
 8000872:	4a6f      	ldr	r2, [pc, #444]	@ (8000a30 <buttonReading+0x274>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d103      	bne.n	8000886 <buttonReading+0xca>
			 					 pressProcess(i);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ff54 	bl	800072c <pressProcess>
 8000884:	e008      	b.n	8000898 <buttonReading+0xdc>
			 				 else if(buttonBuffer[i] == NORMAL_STATE)
 8000886:	4a6a      	ldr	r2, [pc, #424]	@ (8000a30 <buttonReading+0x274>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4413      	add	r3, r2
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d102      	bne.n	8000898 <buttonReading+0xdc>
			 					 normalProcess(i);
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ff7a 	bl	800078c <normalProcess>
			 				 keyPressCounter[i] = AUTO_DURATION;
 8000898:	4a68      	ldr	r2, [pc, #416]	@ (8000a3c <buttonReading+0x280>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	21c8      	movs	r1, #200	@ 0xc8
 800089e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 80008a2:	e0fc      	b.n	8000a9e <buttonReading+0x2e2>
			 				 keyPressCounter[i] --;
 80008a4:	4a65      	ldr	r2, [pc, #404]	@ (8000a3c <buttonReading+0x280>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	4963      	ldr	r1, [pc, #396]	@ (8000a3c <buttonReading+0x280>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 				 if(keyPressCounter[i] <= 0){
 80008b6:	4a61      	ldr	r2, [pc, #388]	@ (8000a3c <buttonReading+0x280>)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f300 80ed 	bgt.w	8000a9e <buttonReading+0x2e2>
			 					 if(buttonBuffer[i] == PRESSED_STATE){
 80008c4:	4a5a      	ldr	r2, [pc, #360]	@ (8000a30 <buttonReading+0x274>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <buttonReading+0x11a>
			 						 pressProcess(i);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff2b 	bl	800072c <pressProcess>
			 					 keyPressCounter[i] = AUTO_DURATION;
 80008d6:	4a59      	ldr	r2, [pc, #356]	@ (8000a3c <buttonReading+0x280>)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	21c8      	movs	r1, #200	@ 0xc8
 80008dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 80008e0:	e0dd      	b.n	8000a9e <buttonReading+0x2e2>
			 buttonBuffer[i] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 80008e2:	2120      	movs	r1, #32
 80008e4:	4853      	ldr	r0, [pc, #332]	@ (8000a34 <buttonReading+0x278>)
 80008e6:	f001 facf 	bl	8001e88 <HAL_GPIO_ReadPin>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4619      	mov	r1, r3
 80008ee:	4a50      	ldr	r2, [pc, #320]	@ (8000a30 <buttonReading+0x274>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	460a      	mov	r2, r1
 80008f6:	701a      	strb	r2, [r3, #0]
			 if((buttonBounce1[i] == buttonBounce2[i]) && (buttonBounce2[i] == buttonBuffer[i])){
 80008f8:	4a4c      	ldr	r2, [pc, #304]	@ (8000a2c <buttonReading+0x270>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	4949      	ldr	r1, [pc, #292]	@ (8000a28 <buttonReading+0x26c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	440b      	add	r3, r1
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	f040 80ca 	bne.w	8000aa2 <buttonReading+0x2e6>
 800090e:	4a46      	ldr	r2, [pc, #280]	@ (8000a28 <buttonReading+0x26c>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4413      	add	r3, r2
 8000914:	781a      	ldrb	r2, [r3, #0]
 8000916:	4946      	ldr	r1, [pc, #280]	@ (8000a30 <buttonReading+0x274>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	440b      	add	r3, r1
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	429a      	cmp	r2, r3
 8000920:	f040 80bf 	bne.w	8000aa2 <buttonReading+0x2e6>
			 			 if(buttonBounce3[i] != buttonBuffer[i]){
 8000924:	4a44      	ldr	r2, [pc, #272]	@ (8000a38 <buttonReading+0x27c>)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	4940      	ldr	r1, [pc, #256]	@ (8000a30 <buttonReading+0x274>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	440b      	add	r3, r1
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	d021      	beq.n	800097c <buttonReading+0x1c0>
			 				 buttonBounce3[i] = buttonBuffer[i];
 8000938:	4a3d      	ldr	r2, [pc, #244]	@ (8000a30 <buttonReading+0x274>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	7819      	ldrb	r1, [r3, #0]
 8000940:	4a3d      	ldr	r2, [pc, #244]	@ (8000a38 <buttonReading+0x27c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	460a      	mov	r2, r1
 8000948:	701a      	strb	r2, [r3, #0]
			 				 if(buttonBuffer[i] == PRESSED_STATE){
 800094a:	4a39      	ldr	r2, [pc, #228]	@ (8000a30 <buttonReading+0x274>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4413      	add	r3, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <buttonReading+0x1a2>
			 					 pressProcess(i);
 8000956:	6878      	ldr	r0, [r7, #4]
 8000958:	f7ff fee8 	bl	800072c <pressProcess>
 800095c:	e008      	b.n	8000970 <buttonReading+0x1b4>
			 				 else if(buttonBuffer[i] == NORMAL_STATE)
 800095e:	4a34      	ldr	r2, [pc, #208]	@ (8000a30 <buttonReading+0x274>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d102      	bne.n	8000970 <buttonReading+0x1b4>
								 normalProcess(i);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ff0e 	bl	800078c <normalProcess>
							 keyPressCounter[i] = AUTO_DURATION;
 8000970:	4a32      	ldr	r2, [pc, #200]	@ (8000a3c <buttonReading+0x280>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	21c8      	movs	r1, #200	@ 0xc8
 8000976:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 800097a:	e092      	b.n	8000aa2 <buttonReading+0x2e6>
			 				 keyPressCounter[i] --;
 800097c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a3c <buttonReading+0x280>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	492d      	ldr	r1, [pc, #180]	@ (8000a3c <buttonReading+0x280>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 				 if(keyPressCounter[i] <= 0){
 800098e:	4a2b      	ldr	r2, [pc, #172]	@ (8000a3c <buttonReading+0x280>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000996:	2b00      	cmp	r3, #0
 8000998:	f300 8083 	bgt.w	8000aa2 <buttonReading+0x2e6>
			 					 if(buttonBuffer[i] == PRESSED_STATE){
 800099c:	4a24      	ldr	r2, [pc, #144]	@ (8000a30 <buttonReading+0x274>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d17c      	bne.n	8000aa2 <buttonReading+0x2e6>
			 						 holdProcess(i);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fed7 	bl	800075c <holdProcess>
			 break;
 80009ae:	e078      	b.n	8000aa2 <buttonReading+0x2e6>
			 buttonBuffer[i] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 80009b0:	2110      	movs	r1, #16
 80009b2:	4820      	ldr	r0, [pc, #128]	@ (8000a34 <buttonReading+0x278>)
 80009b4:	f001 fa68 	bl	8001e88 <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4619      	mov	r1, r3
 80009bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <buttonReading+0x274>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	460a      	mov	r2, r1
 80009c4:	701a      	strb	r2, [r3, #0]
			 if((buttonBounce1[i] == buttonBounce2[i]) && (buttonBounce2[i] == buttonBuffer[i])){
 80009c6:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <buttonReading+0x270>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	781a      	ldrb	r2, [r3, #0]
 80009ce:	4916      	ldr	r1, [pc, #88]	@ (8000a28 <buttonReading+0x26c>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	440b      	add	r3, r1
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d165      	bne.n	8000aa6 <buttonReading+0x2ea>
 80009da:	4a13      	ldr	r2, [pc, #76]	@ (8000a28 <buttonReading+0x26c>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4413      	add	r3, r2
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	4913      	ldr	r1, [pc, #76]	@ (8000a30 <buttonReading+0x274>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	440b      	add	r3, r1
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d15b      	bne.n	8000aa6 <buttonReading+0x2ea>
			 			 if(buttonBounce3[i] != buttonBuffer[i]){
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <buttonReading+0x27c>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4413      	add	r3, r2
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	490e      	ldr	r1, [pc, #56]	@ (8000a30 <buttonReading+0x274>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	440b      	add	r3, r1
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d02d      	beq.n	8000a5e <buttonReading+0x2a2>
			 				 buttonBounce3[i] = buttonBuffer[i];
 8000a02:	4a0b      	ldr	r2, [pc, #44]	@ (8000a30 <buttonReading+0x274>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4413      	add	r3, r2
 8000a08:	7819      	ldrb	r1, [r3, #0]
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a38 <buttonReading+0x27c>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4413      	add	r3, r2
 8000a10:	460a      	mov	r2, r1
 8000a12:	701a      	strb	r2, [r3, #0]
			 				 if(buttonBuffer[i] == PRESSED_STATE){
 8000a14:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <buttonReading+0x274>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d10f      	bne.n	8000a40 <buttonReading+0x284>
			 					 pressProcess(i);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f7ff fe83 	bl	800072c <pressProcess>
 8000a26:	e014      	b.n	8000a52 <buttonReading+0x296>
 8000a28:	200000a4 	.word	0x200000a4
 8000a2c:	200000a0 	.word	0x200000a0
 8000a30:	2000009c 	.word	0x2000009c
 8000a34:	40010c00 	.word	0x40010c00
 8000a38:	200000a8 	.word	0x200000a8
 8000a3c:	200000c4 	.word	0x200000c4
			 				 else if(buttonBuffer[i] == NORMAL_STATE)
 8000a40:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac0 <buttonReading+0x304>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d102      	bne.n	8000a52 <buttonReading+0x296>
								 normalProcess(i);
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fe9d 	bl	800078c <normalProcess>
							 keyPressCounter[i] = AUTO_DURATION;
 8000a52:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <buttonReading+0x308>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	21c8      	movs	r1, #200	@ 0xc8
 8000a58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 8000a5c:	e023      	b.n	8000aa6 <buttonReading+0x2ea>
			 				 keyPressCounter[i] --;
 8000a5e:	4a19      	ldr	r2, [pc, #100]	@ (8000ac4 <buttonReading+0x308>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	1e5a      	subs	r2, r3, #1
 8000a68:	4916      	ldr	r1, [pc, #88]	@ (8000ac4 <buttonReading+0x308>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			 				 if(keyPressCounter[i] <= 0){
 8000a70:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <buttonReading+0x308>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	dc14      	bgt.n	8000aa6 <buttonReading+0x2ea>
			 					 if(buttonBuffer[i] == PRESSED_STATE){
 8000a7c:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <buttonReading+0x304>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <buttonReading+0x2d2>
			 						 pressProcess(i);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fe4f 	bl	800072c <pressProcess>
			 					 keyPressCounter[i] = AUTO_DURATION;
 8000a8e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <buttonReading+0x308>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	21c8      	movs	r1, #200	@ 0xc8
 8000a94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 break;
 8000a98:	e005      	b.n	8000aa6 <buttonReading+0x2ea>
		 	 break;
 8000a9a:	bf00      	nop
 8000a9c:	e004      	b.n	8000aa8 <buttonReading+0x2ec>
			 break;
 8000a9e:	bf00      	nop
 8000aa0:	e002      	b.n	8000aa8 <buttonReading+0x2ec>
			 break;
 8000aa2:	bf00      	nop
 8000aa4:	e000      	b.n	8000aa8 <buttonReading+0x2ec>
			 break;
 8000aa6:	bf00      	nop
	 for(int i = 0; i < BUTTON_NUM; i ++ ){
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	f77f ae89 	ble.w	80007c8 <buttonReading+0xc>
		 }
	 }
 }
 8000ab6:	bf00      	nop
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000009c 	.word	0x2000009c
 8000ac4:	200000c4 	.word	0x200000c4

08000ac8 <isButtonPressed>:
//BUTTON INDEX COUNT FROM 1
 int isButtonPressed(int index){
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	 if(button_flag[index - 1] == 1){
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	4a09      	ldr	r2, [pc, #36]	@ (8000afc <isButtonPressed+0x34>)
 8000ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d107      	bne.n	8000aee <isButtonPressed+0x26>
		 button_flag[index - 1] = 0;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	4a06      	ldr	r2, [pc, #24]	@ (8000afc <isButtonPressed+0x34>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 return 1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e000      	b.n	8000af0 <isButtonPressed+0x28>
	 }
	 return 0;
 8000aee:	2300      	movs	r3, #0
 }
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200000ac 	.word	0x200000ac

08000b00 <isButtonHold>:
 int isButtonHold(int index){
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
	 if(button_hold[index - 1] == 1){
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	4a09      	ldr	r2, [pc, #36]	@ (8000b34 <isButtonHold+0x34>)
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d107      	bne.n	8000b26 <isButtonHold+0x26>
		 button_hold[index - 1] = 0;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a06      	ldr	r2, [pc, #24]	@ (8000b34 <isButtonHold+0x34>)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 return 1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <isButtonHold+0x28>
	 }
	 return 0;
 8000b26:	2300      	movs	r3, #0
 }
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200000b8 	.word	0x200000b8

08000b38 <automatic_display>:
 *      Author: LENOVO
 */
#include<displayLCD.h>

int buffer[4] = {0,0,0,0};
void automatic_display(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
//	lcd_clear();
	lcd_put_cur(0, 0);
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 f8ef 	bl	8000d24 <lcd_put_cur>
	lcd_send_string("AUTOMATIC MODE");
 8000b46:	4830      	ldr	r0, [pc, #192]	@ (8000c08 <automatic_display+0xd0>)
 8000b48:	f000 f945 	bl	8000dd6 <lcd_send_string>
	char str1[20];
	char str2[20];
	switch(buffer[2]){
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <automatic_display+0xd4>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d018      	beq.n	8000b86 <automatic_display+0x4e>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	dc1f      	bgt.n	8000b98 <automatic_display+0x60>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d002      	beq.n	8000b62 <automatic_display+0x2a>
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d009      	beq.n	8000b74 <automatic_display+0x3c>
		break;
	case 2:
		sprintf(str1,"AMBER: %d",buffer[0]);
		break;
	default:
		break;
 8000b60:	e01a      	b.n	8000b98 <automatic_display+0x60>
		sprintf(str1,"RED: %d",buffer[0]);
 8000b62:	4b2a      	ldr	r3, [pc, #168]	@ (8000c0c <automatic_display+0xd4>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4929      	ldr	r1, [pc, #164]	@ (8000c10 <automatic_display+0xd8>)
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 fc01 	bl	8005374 <siprintf>
		break;
 8000b72:	e012      	b.n	8000b9a <automatic_display+0x62>
		sprintf(str1,"GREEN: %d",buffer[0]);
 8000b74:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <automatic_display+0xd4>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4925      	ldr	r1, [pc, #148]	@ (8000c14 <automatic_display+0xdc>)
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 fbf8 	bl	8005374 <siprintf>
		break;
 8000b84:	e009      	b.n	8000b9a <automatic_display+0x62>
		sprintf(str1,"AMBER: %d",buffer[0]);
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <automatic_display+0xd4>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4922      	ldr	r1, [pc, #136]	@ (8000c18 <automatic_display+0xe0>)
 8000b90:	4618      	mov	r0, r3
 8000b92:	f004 fbef 	bl	8005374 <siprintf>
		break;
 8000b96:	e000      	b.n	8000b9a <automatic_display+0x62>
		break;
 8000b98:	bf00      	nop
	}
	switch(buffer[3]){
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <automatic_display+0xd4>)
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d016      	beq.n	8000bd0 <automatic_display+0x98>
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	dc1b      	bgt.n	8000bde <automatic_display+0xa6>
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d002      	beq.n	8000bb0 <automatic_display+0x78>
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d008      	beq.n	8000bc0 <automatic_display+0x88>
 8000bae:	e016      	b.n	8000bde <automatic_display+0xa6>
	case 0:
		sprintf(str2,"RED: %d",buffer[1]);
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <automatic_display+0xd4>)
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4916      	ldr	r1, [pc, #88]	@ (8000c10 <automatic_display+0xd8>)
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fbdb 	bl	8005374 <siprintf>
		break;
 8000bbe:	e00e      	b.n	8000bde <automatic_display+0xa6>
	case 1:
		sprintf(str2,"GREEN: %d",buffer[1]);
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <automatic_display+0xd4>)
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4913      	ldr	r1, [pc, #76]	@ (8000c14 <automatic_display+0xdc>)
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f004 fbd3 	bl	8005374 <siprintf>
		break;
 8000bce:	e006      	b.n	8000bde <automatic_display+0xa6>
	case 2:
		sprintf(str2,"AMBER: %d",buffer[1]);
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <automatic_display+0xd4>)
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4910      	ldr	r1, [pc, #64]	@ (8000c18 <automatic_display+0xe0>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fbcb 	bl	8005374 <siprintf>
	}
	lcd_put_cur(1, 0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 f89f 	bl	8000d24 <lcd_put_cur>
	lcd_send_string(str1);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f8f3 	bl	8000dd6 <lcd_send_string>
	lcd_put_cur(1, 8);
 8000bf0:	2108      	movs	r1, #8
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f000 f896 	bl	8000d24 <lcd_put_cur>
	lcd_send_string(str2);
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f8eb 	bl	8000dd6 <lcd_send_string>
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	@ 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08005b90 	.word	0x08005b90
 8000c0c:	200000d0 	.word	0x200000d0
 8000c10:	08005ba0 	.word	0x08005ba0
 8000c14:	08005ba8 	.word	0x08005ba8
 8000c18:	08005bb4 	.word	0x08005bb4

08000c1c <initial>:
	{
		HAL_GPIO_TogglePin(LED0_0_GPIO_Port, LED0_0_Pin);
		setTimer(1, timer_dura[1]);
	}
}
void initial(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	setTimer(0, timer_dura[0]);
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <initial+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 fd1e 	bl	8001668 <setTimer>
	setTimer(1, timer_dura[1]);
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <initial+0x40>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	4619      	mov	r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 fd18 	bl	8001668 <setTimer>
	setTimer(2, timer_dura[2]);
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <initial+0x40>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f000 fd12 	bl	8001668 <setTimer>
	setTimer(3, timer_dura[3]);
 8000c44:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <initial+0x40>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f000 fd0c 	bl	8001668 <setTimer>
	status = INIT;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <initial+0x44>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000014 	.word	0x20000014
 8000c60:	200000e0 	.word	0x200000e0

08000c64 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x42 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f023 030f 	bic.w	r3, r3, #15
 8000c74:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	f043 030c 	orr.w	r3, r3, #12
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000c90:	7bbb      	ldrb	r3, [r7, #14]
 8000c92:	f043 030c 	orr.w	r3, r3, #12
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 8000c9a:	7bbb      	ldrb	r3, [r7, #14]
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ca4:	f107 0208 	add.w	r2, r7, #8
 8000ca8:	2364      	movs	r3, #100	@ 0x64
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2304      	movs	r3, #4
 8000cae:	2142      	movs	r1, #66	@ 0x42
 8000cb0:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <lcd_send_cmd+0x5c>)
 8000cb2:	f001 fa89 	bl	80021c8 <HAL_I2C_Master_Transmit>
}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000f8 	.word	0x200000f8

08000cc4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af02      	add	r7, sp, #8
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f023 030f 	bic.w	r3, r3, #15
 8000cd4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	f043 030d 	orr.w	r3, r3, #13
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	f043 0309 	orr.w	r3, r3, #9
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8000cf0:	7bbb      	ldrb	r3, [r7, #14]
 8000cf2:	f043 030d 	orr.w	r3, r3, #13
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 8000cfa:	7bbb      	ldrb	r3, [r7, #14]
 8000cfc:	f043 0309 	orr.w	r3, r3, #9
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d04:	f107 0208 	add.w	r2, r7, #8
 8000d08:	2364      	movs	r3, #100	@ 0x64
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	2142      	movs	r1, #66	@ 0x42
 8000d10:	4803      	ldr	r0, [pc, #12]	@ (8000d20 <lcd_send_data+0x5c>)
 8000d12:	f001 fa59 	bl	80021c8 <HAL_I2C_Master_Transmit>
}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000f8 	.word	0x200000f8

08000d24 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    switch (row)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <lcd_put_cur+0x18>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d005      	beq.n	8000d46 <lcd_put_cur+0x22>
 8000d3a:	e009      	b.n	8000d50 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d42:	603b      	str	r3, [r7, #0]
            break;
 8000d44:	e004      	b.n	8000d50 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000d4c:	603b      	str	r3, [r7, #0]
            break;
 8000d4e:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff85 	bl	8000c64 <lcd_send_cmd>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <lcd_init>:


void lcd_init (void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
	// 4 bit initialisation
//	HAL_Delay(50);  // wait for >40ms
	lcd_send_cmd (0x30);
 8000d66:	2030      	movs	r0, #48	@ 0x30
 8000d68:	f7ff ff7c 	bl	8000c64 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d6c:	2005      	movs	r0, #5
 8000d6e:	f000 fd4f 	bl	8001810 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d72:	2030      	movs	r0, #48	@ 0x30
 8000d74:	f7ff ff76 	bl	8000c64 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f000 fd49 	bl	8001810 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d7e:	2030      	movs	r0, #48	@ 0x30
 8000d80:	f7ff ff70 	bl	8000c64 <lcd_send_cmd>
	HAL_Delay(10);
 8000d84:	200a      	movs	r0, #10
 8000d86:	f000 fd43 	bl	8001810 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d8a:	2020      	movs	r0, #32
 8000d8c:	f7ff ff6a 	bl	8000c64 <lcd_send_cmd>
	HAL_Delay(10);
 8000d90:	200a      	movs	r0, #10
 8000d92:	f000 fd3d 	bl	8001810 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d96:	2028      	movs	r0, #40	@ 0x28
 8000d98:	f7ff ff64 	bl	8000c64 <lcd_send_cmd>
	HAL_Delay(1);
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f000 fd37 	bl	8001810 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000da2:	2008      	movs	r0, #8
 8000da4:	f7ff ff5e 	bl	8000c64 <lcd_send_cmd>
	HAL_Delay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f000 fd31 	bl	8001810 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff ff58 	bl	8000c64 <lcd_send_cmd>
	HAL_Delay(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f000 fd2b 	bl	8001810 <HAL_Delay>
	HAL_Delay(1);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fd28 	bl	8001810 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000dc0:	2006      	movs	r0, #6
 8000dc2:	f7ff ff4f 	bl	8000c64 <lcd_send_cmd>
	HAL_Delay(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 fd22 	bl	8001810 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000dcc:	200c      	movs	r0, #12
 8000dce:	f7ff ff49 	bl	8000c64 <lcd_send_cmd>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000dde:	e006      	b.n	8000dee <lcd_send_string+0x18>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff6b 	bl	8000cc4 <lcd_send_data>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f4      	bne.n	8000de0 <lcd_send_string+0xa>
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f000 fca2 	bl	800174c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f000 f84e 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f000 f902 	bl	8001014 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e10:	f000 f8b4 	bl	8000f7c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e14:	f000 f884 	bl	8000f20 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SCH_init();
 8000e18:	f000 f9b2 	bl	8001180 <SCH_init>
  initial();
 8000e1c:	f7ff fefe 	bl	8000c1c <initial>
  lcd_init();
 8000e20:	f7ff ff9f 	bl	8000d62 <lcd_init>
//  lcd_clear();
  HAL_TIM_Base_Start_IT (& htim2 );
 8000e24:	4819      	ldr	r0, [pc, #100]	@ (8000e8c <main+0x8c>)
 8000e26:	f003 fe45 	bl	8004ab4 <HAL_TIM_Base_Start_IT>
  SCH_addTask(runTimer, 0, 1, 0);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4817      	ldr	r0, [pc, #92]	@ (8000e90 <main+0x90>)
 8000e32:	f000 f9f7 	bl	8001224 <SCH_addTask>
  SCH_addTask(buttonReading, 1, 2, 1);
 8000e36:	2301      	movs	r3, #1
 8000e38:	2202      	movs	r2, #2
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4815      	ldr	r0, [pc, #84]	@ (8000e94 <main+0x94>)
 8000e3e:	f000 f9f1 	bl	8001224 <SCH_addTask>
  SCH_addTask(automaticRun, 2, 2, 2);
 8000e42:	2302      	movs	r3, #2
 8000e44:	2202      	movs	r2, #2
 8000e46:	2102      	movs	r1, #2
 8000e48:	4813      	ldr	r0, [pc, #76]	@ (8000e98 <main+0x98>)
 8000e4a:	f000 f9eb 	bl	8001224 <SCH_addTask>
  SCH_addTask(manual_run, 3, 2, 3);
 8000e4e:	2303      	movs	r3, #3
 8000e50:	2202      	movs	r2, #2
 8000e52:	2103      	movs	r1, #3
 8000e54:	4811      	ldr	r0, [pc, #68]	@ (8000e9c <main+0x9c>)
 8000e56:	f000 f9e5 	bl	8001224 <SCH_addTask>
  SCH_addTask(automatic_display, 2, 2, 4);
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	2102      	movs	r1, #2
 8000e60:	480f      	ldr	r0, [pc, #60]	@ (8000ea0 <main+0xa0>)
 8000e62:	f000 f9df 	bl	8001224 <SCH_addTask>

//  lcd_put_cur(0, 0);
//  lcd_send_string("HELLO");
  while (1)
  {
	  buffer[0]++;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea4 <main+0xa4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <main+0xa4>)
 8000e6e:	6013      	str	r3, [r2, #0]
	  buffer[1]++;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <main+0xa4>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea4 <main+0xa4>)
 8000e78:	6053      	str	r3, [r2, #4]
	  HAL_Delay(1000);
 8000e7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e7e:	f000 fcc7 	bl	8001810 <HAL_Delay>
	  SCH_dispatchTask();
 8000e82:	f000 fa87 	bl	8001394 <SCH_dispatchTask>
	  buffer[0]++;
 8000e86:	bf00      	nop
 8000e88:	e7ed      	b.n	8000e66 <main+0x66>
 8000e8a:	bf00      	nop
 8000e8c:	2000014c 	.word	0x2000014c
 8000e90:	080016a9 	.word	0x080016a9
 8000e94:	080007bd 	.word	0x080007bd
 8000e98:	0800014d 	.word	0x0800014d
 8000e9c:	080003d5 	.word	0x080003d5
 8000ea0:	08000b39 	.word	0x08000b39
 8000ea4:	200000d0 	.word	0x200000d0

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b090      	sub	sp, #64	@ 0x40
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	2228      	movs	r2, #40	@ 0x28
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f004 fa7c 	bl	80053b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ed2:	2310      	movs	r3, #16
 8000ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eda:	f107 0318 	add.w	r3, r7, #24
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 f99c 	bl	800421c <HAL_RCC_OscConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eea:	f000 f91f 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eee:	230f      	movs	r3, #15
 8000ef0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fc0a 	bl	8004720 <HAL_RCC_ClockConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f12:	f000 f90b 	bl	800112c <Error_Handler>
  }
}
 8000f16:	bf00      	nop
 8000f18:	3740      	adds	r7, #64	@ 0x40
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f26:	4a13      	ldr	r2, [pc, #76]	@ (8000f74 <MX_I2C1_Init+0x54>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f2c:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <MX_I2C1_Init+0x58>)
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f5e:	f000 ffdb 	bl	8001f18 <HAL_I2C_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f68:	f000 f8e0 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000f8 	.word	0x200000f8
 8000f74:	40005400 	.word	0x40005400
 8000f78:	000186a0 	.word	0x000186a0

08000f7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	463b      	mov	r3, r7
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <MX_TIM2_Init+0x94>)
 8000f9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <MX_TIM2_Init+0x94>)
 8000fa2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000fa6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <MX_TIM2_Init+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <MX_TIM2_Init+0x94>)
 8000fb0:	2209      	movs	r2, #9
 8000fb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <MX_TIM2_Init+0x94>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_TIM2_Init+0x94>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fc0:	4813      	ldr	r0, [pc, #76]	@ (8001010 <MX_TIM2_Init+0x94>)
 8000fc2:	f003 fd27 	bl	8004a14 <HAL_TIM_Base_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fcc:	f000 f8ae 	bl	800112c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <MX_TIM2_Init+0x94>)
 8000fde:	f003 feab 	bl	8004d38 <HAL_TIM_ConfigClockSource>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fe8:	f000 f8a0 	bl	800112c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fec:	2300      	movs	r3, #0
 8000fee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <MX_TIM2_Init+0x94>)
 8000ffa:	f004 f88d 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001004:	f000 f892 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000014c 	.word	0x2000014c

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001028:	4b38      	ldr	r3, [pc, #224]	@ (800110c <MX_GPIO_Init+0xf8>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a37      	ldr	r2, [pc, #220]	@ (800110c <MX_GPIO_Init+0xf8>)
 800102e:	f043 0310 	orr.w	r3, r3, #16
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b35      	ldr	r3, [pc, #212]	@ (800110c <MX_GPIO_Init+0xf8>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0310 	and.w	r3, r3, #16
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001040:	4b32      	ldr	r3, [pc, #200]	@ (800110c <MX_GPIO_Init+0xf8>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a31      	ldr	r2, [pc, #196]	@ (800110c <MX_GPIO_Init+0xf8>)
 8001046:	f043 0320 	orr.w	r3, r3, #32
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b2f      	ldr	r3, [pc, #188]	@ (800110c <MX_GPIO_Init+0xf8>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0320 	and.w	r3, r3, #32
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <MX_GPIO_Init+0xf8>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a2b      	ldr	r2, [pc, #172]	@ (800110c <MX_GPIO_Init+0xf8>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b29      	ldr	r3, [pc, #164]	@ (800110c <MX_GPIO_Init+0xf8>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b26      	ldr	r3, [pc, #152]	@ (800110c <MX_GPIO_Init+0xf8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a25      	ldr	r2, [pc, #148]	@ (800110c <MX_GPIO_Init+0xf8>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b23      	ldr	r3, [pc, #140]	@ (800110c <MX_GPIO_Init+0xf8>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_0_Pin|LED0_1_Pin|LED1_0_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
 800108a:	2113      	movs	r1, #19
 800108c:	4820      	ldr	r0, [pc, #128]	@ (8001110 <MX_GPIO_Init+0xfc>)
 800108e:	f000 ff12 	bl	8001eb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_1_GPIO_Port, LED1_1_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2101      	movs	r1, #1
 8001096:	481f      	ldr	r0, [pc, #124]	@ (8001114 <MX_GPIO_Init+0x100>)
 8001098:	f000 ff0d 	bl	8001eb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_0_Pin LED0_1_Pin LED1_0_Pin */
  GPIO_InitStruct.Pin = LED0_0_Pin|LED0_1_Pin|LED1_0_Pin;
 800109c:	2313      	movs	r3, #19
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	4817      	ldr	r0, [pc, #92]	@ (8001110 <MX_GPIO_Init+0xfc>)
 80010b4:	f000 fd64 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010b8:	230c      	movs	r3, #12
 80010ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4619      	mov	r1, r3
 80010ca:	4811      	ldr	r0, [pc, #68]	@ (8001110 <MX_GPIO_Init+0xfc>)
 80010cc:	f000 fd58 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_1_Pin */
  GPIO_InitStruct.Pin = LED1_1_Pin;
 80010d0:	2301      	movs	r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	2302      	movs	r3, #2
 80010de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_1_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	480b      	ldr	r0, [pc, #44]	@ (8001114 <MX_GPIO_Init+0x100>)
 80010e8:	f000 fd4a 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button3_Pin button2_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button3_Pin|button2_Pin;
 80010ec:	2338      	movs	r3, #56	@ 0x38
 80010ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_GPIO_Init+0x100>)
 8001100:	f000 fd3e 	bl	8001b80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021000 	.word	0x40021000
 8001110:	40010800 	.word	0x40010800
 8001114:	40010c00 	.word	0x40010c00

08001118 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

	SCH_updateTask();
 8001120:	f000 f8fe 	bl	8001320 <SCH_updateTask>

}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <Error_Handler+0x8>

08001138 <createNode>:
 *      Author: ADMIN
 */

#include "scheduler.h"
Node *createNode(void(*pFunction), int delay, int period, int ID, Node *next)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]
    Node *newNode = (Node *)malloc(sizeof(Node));
 8001146:	2014      	movs	r0, #20
 8001148:	f004 f856 	bl	80051f8 <malloc>
 800114c:	4603      	mov	r3, r0
 800114e:	617b      	str	r3, [r7, #20]
    if (newNode != NULL)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00e      	beq.n	8001174 <createNode+0x3c>
    {
    	newNode->pTask = pFunction;
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	601a      	str	r2, [r3, #0]
        newNode->delay = delay;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	605a      	str	r2, [r3, #4]
        newNode->period = period;
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	609a      	str	r2, [r3, #8]
        newNode->ID = ID;
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	60da      	str	r2, [r3, #12]
        newNode->next = next;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	6a3a      	ldr	r2, [r7, #32]
 8001172:	611a      	str	r2, [r3, #16]
    }
    return newNode;
 8001174:	697b      	ldr	r3, [r7, #20]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <SCH_init>:
    SCH->time_skip = 0;
    SCH->head = SCH->tail = NULL;
    return SCH;
}
void SCH_init()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	mainSCH = (SCH_task *)malloc(sizeof(SCH_task));
 8001184:	2010      	movs	r0, #16
 8001186:	f004 f837 	bl	80051f8 <malloc>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <SCH_init+0x38>)
 8001190:	601a      	str	r2, [r3, #0]
	mainSCH->size = 0;
 8001192:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <SCH_init+0x38>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
	mainSCH->time_skip = 0;
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <SCH_init+0x38>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
	mainSCH->head = mainSCH->tail = NULL;
 80011a2:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <SCH_init+0x38>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	4a03      	ldr	r2, [pc, #12]	@ (80011b8 <SCH_init+0x38>)
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	6093      	str	r3, [r2, #8]
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200000f4 	.word	0x200000f4

080011bc <SCH_deleteHead>:
void SCH_deleteHead()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
    Node *current = mainSCH->head;
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <SCH_deleteHead+0x64>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	607b      	str	r3, [r7, #4]
    switch (mainSCH->size)
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <SCH_deleteHead+0x64>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d021      	beq.n	8001218 <SCH_deleteHead+0x5c>
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d10f      	bne.n	80011f8 <SCH_deleteHead+0x3c>
    {
    case 0:
        return;
    case 1:
        mainSCH->head = NULL;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <SCH_deleteHead+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
        mainSCH->tail = NULL;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <SCH_deleteHead+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
        mainSCH->size--;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <SCH_deleteHead+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	3a01      	subs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
        free(current);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f004 f808 	bl	8005208 <free>
    default:
        mainSCH->head = mainSCH->head->next;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <SCH_deleteHead+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <SCH_deleteHead+0x64>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6912      	ldr	r2, [r2, #16]
 8001204:	609a      	str	r2, [r3, #8]
        free(current);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f003 fffe 	bl	8005208 <free>
        mainSCH->size--;
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <SCH_deleteHead+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	3a01      	subs	r2, #1
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e000      	b.n	800121a <SCH_deleteHead+0x5e>
        return;
 8001218:	bf00      	nop
    }
}
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200000f4 	.word	0x200000f4

08001224 <SCH_addTask>:
    	pFront = pEnd;
    	pEnd = pEnd->next;
    }
}
void SCH_addTask(void(*pFunction), int DELAY, int PERIOD, int ID)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	@ 0x30
 8001228:	af02      	add	r7, sp, #8
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
    Node *node = createNode(pFunction, DELAY, PERIOD, ID, NULL);
 8001232:	2300      	movs	r3, #0
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f7ff ff7b 	bl	8001138 <createNode>
 8001242:	61b8      	str	r0, [r7, #24]
    Node *pFront = NULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
    Node *pEnd = mainSCH->head;
 8001248:	4b34      	ldr	r3, [pc, #208]	@ (800131c <SCH_addTask+0xf8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	623b      	str	r3, [r7, #32]
    bool added = false;
 8001250:	2300      	movs	r3, #0
 8001252:	77fb      	strb	r3, [r7, #31]
    int tmp = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
    while ((pEnd != NULL) && (pEnd != mainSCH->tail->next))
 8001258:	e02c      	b.n	80012b4 <SCH_addTask+0x90>
    {

        tmp = node->delay - pEnd->delay;
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	6a3b      	ldr	r3, [r7, #32]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	617b      	str	r3, [r7, #20]
        if (tmp >= 0)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db03      	blt.n	8001274 <SCH_addTask+0x50>
        {
            node->delay = tmp;
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	e01a      	b.n	80012aa <SCH_addTask+0x86>
        }
        else if (tmp < 0)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b00      	cmp	r3, #0
 8001278:	da17      	bge.n	80012aa <SCH_addTask+0x86>
        {
            node->next = pEnd;
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6a3a      	ldr	r2, [r7, #32]
 800127e:	611a      	str	r2, [r3, #16]
            pEnd->delay = pEnd->delay - node->delay;
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	1ad2      	subs	r2, r2, r3
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	605a      	str	r2, [r3, #4]
            if (pFront)
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <SCH_addTask+0x78>
                pFront->next = node;
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	e003      	b.n	80012a4 <SCH_addTask+0x80>
            else
            	mainSCH->head = node;
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <SCH_addTask+0xf8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	609a      	str	r2, [r3, #8]
            added = true;
 80012a4:	2301      	movs	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
            break;
 80012a8:	e00e      	b.n	80012c8 <SCH_addTask+0xa4>
        }
        pFront = pEnd;
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
        pEnd = pEnd->next;
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	623b      	str	r3, [r7, #32]
    while ((pEnd != NULL) && (pEnd != mainSCH->tail->next))
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <SCH_addTask+0xa4>
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <SCH_addTask+0xf8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	6a3a      	ldr	r2, [r7, #32]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d1c8      	bne.n	800125a <SCH_addTask+0x36>
    }
    if (!added)
 80012c8:	7ffb      	ldrb	r3, [r7, #31]
 80012ca:	f083 0301 	eor.w	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d019      	beq.n	8001308 <SCH_addTask+0xe4>
    {
        if (mainSCH->head)
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <SCH_addTask+0xf8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00c      	beq.n	80012f8 <SCH_addTask+0xd4>
        {
            mainSCH->tail->next = node;
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <SCH_addTask+0xf8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	611a      	str	r2, [r3, #16]
            mainSCH->tail = mainSCH->tail->next;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <SCH_addTask+0xf8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <SCH_addTask+0xf8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6912      	ldr	r2, [r2, #16]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	e007      	b.n	8001308 <SCH_addTask+0xe4>
        }
        else
        {
            mainSCH->head = mainSCH->tail = node;
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <SCH_addTask+0xf8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	4a06      	ldr	r2, [pc, #24]	@ (800131c <SCH_addTask+0xf8>)
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	6093      	str	r3, [r2, #8]
        }
    }
    mainSCH->size++;
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <SCH_addTask+0xf8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	3201      	adds	r2, #1
 8001310:	601a      	str	r2, [r3, #0]
}
 8001312:	bf00      	nop
 8001314:	3728      	adds	r7, #40	@ 0x28
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200000f4 	.word	0x200000f4

08001320 <SCH_updateTask>:
void SCH_updateTask()
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
    if(mainSCH->size > 0){
 8001324:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <SCH_updateTask+0x70>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	dd2c      	ble.n	8001388 <SCH_updateTask+0x68>
    	mainSCH->time_skip += 1;
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <SCH_updateTask+0x70>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <SCH_updateTask+0x70>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3201      	adds	r2, #1
 800133a:	605a      	str	r2, [r3, #4]
    	if(mainSCH->head->delay >= mainSCH->time_skip) mainSCH->head->delay -= mainSCH->time_skip;
 800133c:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <SCH_updateTask+0x70>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <SCH_updateTask+0x70>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	db0c      	blt.n	8001368 <SCH_updateTask+0x48>
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <SCH_updateTask+0x70>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	6859      	ldr	r1, [r3, #4]
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <SCH_updateTask+0x70>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <SCH_updateTask+0x70>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	1a8a      	subs	r2, r1, r2
 8001364:	605a      	str	r2, [r3, #4]
    		mainSCH->time_skip -= mainSCH->head->delay;
    		mainSCH->head->delay = 0;
    	}
    }

}
 8001366:	e00f      	b.n	8001388 <SCH_updateTask+0x68>
    		mainSCH->time_skip -= mainSCH->head->delay;
 8001368:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <SCH_updateTask+0x70>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <SCH_updateTask+0x70>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <SCH_updateTask+0x70>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1a8a      	subs	r2, r1, r2
 800137c:	605a      	str	r2, [r3, #4]
    		mainSCH->head->delay = 0;
 800137e:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <SCH_updateTask+0x70>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	200000f4 	.word	0x200000f4

08001394 <SCH_dispatchTask>:
void SCH_dispatchTask()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
    if (mainSCH->size > 0)
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <SCH_dispatchTask+0x58>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd1e      	ble.n	80013e2 <SCH_dispatchTask+0x4e>
    {

        Node *p = mainSCH->head;
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <SCH_dispatchTask+0x58>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	607b      	str	r3, [r7, #4]
        while (p->delay == 0)
 80013ac:	e015      	b.n	80013da <SCH_dispatchTask+0x46>
        {
            // Do task
        	(*p->pTask)();
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4798      	blx	r3
            if (p->period > 0)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dd09      	ble.n	80013d0 <SCH_dispatchTask+0x3c>
            {
                SCH_addTask(p->pTask, p->period, p->period, p->ID);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6899      	ldr	r1, [r3, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	f7ff ff2a 	bl	8001224 <SCH_addTask>
            }
            p = p->next;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	607b      	str	r3, [r7, #4]
            SCH_deleteHead();
 80013d6:	f7ff fef1 	bl	80011bc <SCH_deleteHead>
        while (p->delay == 0)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0e5      	beq.n	80013ae <SCH_dispatchTask+0x1a>
        }
    }
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200000f4 	.word	0x200000f4

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <HAL_MspInit+0x5c>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a14      	ldr	r2, [pc, #80]	@ (800144c <HAL_MspInit+0x5c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_MspInit+0x5c>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b0f      	ldr	r3, [pc, #60]	@ (800144c <HAL_MspInit+0x5c>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a0e      	ldr	r2, [pc, #56]	@ (800144c <HAL_MspInit+0x5c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b0c      	ldr	r3, [pc, #48]	@ (800144c <HAL_MspInit+0x5c>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <HAL_MspInit+0x60>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <HAL_MspInit+0x60>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000

08001454 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a25      	ldr	r2, [pc, #148]	@ (8001504 <HAL_I2C_MspInit+0xb0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d142      	bne.n	80014fa <HAL_I2C_MspInit+0xa6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001474:	4b24      	ldr	r3, [pc, #144]	@ (8001508 <HAL_I2C_MspInit+0xb4>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4a23      	ldr	r2, [pc, #140]	@ (8001508 <HAL_I2C_MspInit+0xb4>)
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	6193      	str	r3, [r2, #24]
 8001480:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <HAL_I2C_MspInit+0xb4>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800148c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001492:	2312      	movs	r3, #18
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	481a      	ldr	r0, [pc, #104]	@ (800150c <HAL_I2C_MspInit+0xb8>)
 80014a2:	f000 fb6d 	bl	8001b80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_I2C_MspInit+0xbc>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80014bc:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <HAL_I2C_MspInit+0xbc>)
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_I2C_MspInit+0xb4>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a10      	ldr	r2, [pc, #64]	@ (8001508 <HAL_I2C_MspInit+0xb4>)
 80014c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <HAL_I2C_MspInit+0xb4>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	201f      	movs	r0, #31
 80014e0:	f000 fa91 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014e4:	201f      	movs	r0, #31
 80014e6:	f000 faaa 	bl	8001a3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2020      	movs	r0, #32
 80014f0:	f000 fa89 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014f4:	2020      	movs	r0, #32
 80014f6:	f000 faa2 	bl	8001a3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014fa:	bf00      	nop
 80014fc:	3728      	adds	r7, #40	@ 0x28
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40005400 	.word	0x40005400
 8001508:	40021000 	.word	0x40021000
 800150c:	40010c00 	.word	0x40010c00
 8001510:	40010000 	.word	0x40010000

08001514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001524:	d113      	bne.n	800154e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <HAL_TIM_Base_MspInit+0x44>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	4a0b      	ldr	r2, [pc, #44]	@ (8001558 <HAL_TIM_Base_MspInit+0x44>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	61d3      	str	r3, [r2, #28]
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <HAL_TIM_Base_MspInit+0x44>)
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	201c      	movs	r0, #28
 8001544:	f000 fa5f 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001548:	201c      	movs	r0, #28
 800154a:	f000 fa78 	bl	8001a3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <NMI_Handler+0x4>

08001564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <MemManage_Handler+0x4>

08001574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <BusFault_Handler+0x4>

0800157c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <UsageFault_Handler+0x4>

08001584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 f914 	bl	80017d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <TIM2_IRQHandler+0x10>)
 80015ba:	f003 facd 	bl	8004b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	2000014c 	.word	0x2000014c

080015c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <I2C1_EV_IRQHandler+0x10>)
 80015ce:	f000 fef9 	bl	80023c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200000f8 	.word	0x200000f8

080015dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <I2C1_ER_IRQHandler+0x10>)
 80015e2:	f001 f842 	bl	800266a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200000f8 	.word	0x200000f8

080015f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015f8:	4a14      	ldr	r2, [pc, #80]	@ (800164c <_sbrk+0x5c>)
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <_sbrk+0x60>)
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001604:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <_sbrk+0x64>)
 800160e:	4a12      	ldr	r2, [pc, #72]	@ (8001658 <_sbrk+0x68>)
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001612:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	429a      	cmp	r2, r3
 800161e:	d207      	bcs.n	8001630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001620:	f003 fee0 	bl	80053e4 <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	220c      	movs	r2, #12
 8001628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
 800162e:	e009      	b.n	8001644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001636:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <_sbrk+0x64>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	4a05      	ldr	r2, [pc, #20]	@ (8001654 <_sbrk+0x64>)
 8001640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20005000 	.word	0x20005000
 8001650:	00000400 	.word	0x00000400
 8001654:	20000194 	.word	0x20000194
 8001658:	20000310 	.word	0x20000310

0800165c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <setTimer>:

int timer_counter[NUM_TIMER];
int timer_flag[NUM_TIMER];
int timer_dura[NUM_TIMER] = {50, 1000, 250, 250, INT_MAX};

void setTimer(int index, int dura){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
	timer_flag[index] = 0;
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <setTimer+0x34>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2100      	movs	r1, #0
 8001678:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = dura / 10;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4a08      	ldr	r2, [pc, #32]	@ (80016a0 <setTimer+0x38>)
 8001680:	fb82 1203 	smull	r1, r2, r2, r3
 8001684:	1092      	asrs	r2, r2, #2
 8001686:	17db      	asrs	r3, r3, #31
 8001688:	1ad2      	subs	r2, r2, r3
 800168a:	4906      	ldr	r1, [pc, #24]	@ (80016a4 <setTimer+0x3c>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	200001ac 	.word	0x200001ac
 80016a0:	66666667 	.word	0x66666667
 80016a4:	20000198 	.word	0x20000198

080016a8 <runTimer>:
void runTimer(){
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUM_TIMER; i++){
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	e017      	b.n	80016e4 <runTimer+0x3c>
		if(timer_counter[i] <= 0){
 80016b4:	4a10      	ldr	r2, [pc, #64]	@ (80016f8 <runTimer+0x50>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	dc05      	bgt.n	80016cc <runTimer+0x24>
			timer_flag[i] = 1;
 80016c0:	4a0e      	ldr	r2, [pc, #56]	@ (80016fc <runTimer+0x54>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2101      	movs	r1, #1
 80016c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80016ca:	e008      	b.n	80016de <runTimer+0x36>
		}
		else{
			timer_counter[i] --;
 80016cc:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <runTimer+0x50>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	1e5a      	subs	r2, r3, #1
 80016d6:	4908      	ldr	r1, [pc, #32]	@ (80016f8 <runTimer+0x50>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < NUM_TIMER; i++){
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3301      	adds	r3, #1
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	dde4      	ble.n	80016b4 <runTimer+0xc>
		}
	}
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000198 	.word	0x20000198
 80016fc:	200001ac 	.word	0x200001ac

08001700 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001700:	f7ff ffac 	bl	800165c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001704:	480b      	ldr	r0, [pc, #44]	@ (8001734 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001706:	490c      	ldr	r1, [pc, #48]	@ (8001738 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001708:	4a0c      	ldr	r2, [pc, #48]	@ (800173c <LoopFillZerobss+0x16>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800171c:	4c09      	ldr	r4, [pc, #36]	@ (8001744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800172a:	f003 fe61 	bl	80053f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800172e:	f7ff fb67 	bl	8000e00 <main>
  bx lr
 8001732:	4770      	bx	lr
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800173c:	08005c40 	.word	0x08005c40
  ldr r2, =_sbss
 8001740:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001744:	2000030c 	.word	0x2000030c

08001748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_2_IRQHandler>
	...

0800174c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <HAL_Init+0x28>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <HAL_Init+0x28>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175c:	2003      	movs	r0, #3
 800175e:	f000 f947 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001762:	2000      	movs	r0, #0
 8001764:	f000 f808 	bl	8001778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001768:	f7ff fe42 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40022000 	.word	0x40022000

08001778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <HAL_InitTick+0x54>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <HAL_InitTick+0x58>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001792:	fbb2 f3f3 	udiv	r3, r2, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f95f 	bl	8001a5a <HAL_SYSTICK_Config>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e00e      	b.n	80017c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b0f      	cmp	r3, #15
 80017aa:	d80a      	bhi.n	80017c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ac:	2200      	movs	r2, #0
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	f04f 30ff 	mov.w	r0, #4294967295
 80017b4:	f000 f927 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b8:	4a06      	ldr	r2, [pc, #24]	@ (80017d4 <HAL_InitTick+0x5c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000010 	.word	0x20000010
 80017d0:	2000002c 	.word	0x2000002c
 80017d4:	20000028 	.word	0x20000028

080017d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <HAL_IncTick+0x1c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <HAL_IncTick+0x20>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	4a03      	ldr	r2, [pc, #12]	@ (80017f8 <HAL_IncTick+0x20>)
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	2000002c 	.word	0x2000002c
 80017f8:	200001c0 	.word	0x200001c0

080017fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001800:	4b02      	ldr	r3, [pc, #8]	@ (800180c <HAL_GetTick+0x10>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	200001c0 	.word	0x200001c0

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff fff0 	bl	80017fc <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <HAL_Delay+0x44>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffe0 	bl	80017fc <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	bf00      	nop
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000002c 	.word	0x2000002c

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4906      	ldr	r1, [pc, #24]	@ (80018f0 <__NVIC_EnableIRQ+0x34>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	@ (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff90 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	@ (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	@ (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff2d 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff42 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff90 	bl	8001948 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5f 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff35 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa2 	bl	80019ac <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d005      	beq.n	8001a98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	e051      	b.n	8001b3c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 020e 	bic.w	r2, r2, #14
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a22      	ldr	r2, [pc, #136]	@ (8001b48 <HAL_DMA_Abort_IT+0xd4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d029      	beq.n	8001b16 <HAL_DMA_Abort_IT+0xa2>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a21      	ldr	r2, [pc, #132]	@ (8001b4c <HAL_DMA_Abort_IT+0xd8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d022      	beq.n	8001b12 <HAL_DMA_Abort_IT+0x9e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1f      	ldr	r2, [pc, #124]	@ (8001b50 <HAL_DMA_Abort_IT+0xdc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01a      	beq.n	8001b0c <HAL_DMA_Abort_IT+0x98>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1e      	ldr	r2, [pc, #120]	@ (8001b54 <HAL_DMA_Abort_IT+0xe0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d012      	beq.n	8001b06 <HAL_DMA_Abort_IT+0x92>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8001b58 <HAL_DMA_Abort_IT+0xe4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00a      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x8c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a1b      	ldr	r2, [pc, #108]	@ (8001b5c <HAL_DMA_Abort_IT+0xe8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d102      	bne.n	8001afa <HAL_DMA_Abort_IT+0x86>
 8001af4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001af8:	e00e      	b.n	8001b18 <HAL_DMA_Abort_IT+0xa4>
 8001afa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001afe:	e00b      	b.n	8001b18 <HAL_DMA_Abort_IT+0xa4>
 8001b00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b04:	e008      	b.n	8001b18 <HAL_DMA_Abort_IT+0xa4>
 8001b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0a:	e005      	b.n	8001b18 <HAL_DMA_Abort_IT+0xa4>
 8001b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b10:	e002      	b.n	8001b18 <HAL_DMA_Abort_IT+0xa4>
 8001b12:	2310      	movs	r3, #16
 8001b14:	e000      	b.n	8001b18 <HAL_DMA_Abort_IT+0xa4>
 8001b16:	2301      	movs	r3, #1
 8001b18:	4a11      	ldr	r2, [pc, #68]	@ (8001b60 <HAL_DMA_Abort_IT+0xec>)
 8001b1a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
    } 
  }
  return status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40020008 	.word	0x40020008
 8001b4c:	4002001c 	.word	0x4002001c
 8001b50:	40020030 	.word	0x40020030
 8001b54:	40020044 	.word	0x40020044
 8001b58:	40020058 	.word	0x40020058
 8001b5c:	4002006c 	.word	0x4002006c
 8001b60:	40020000 	.word	0x40020000

08001b64 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b72:	b2db      	uxtb	r3, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b08b      	sub	sp, #44	@ 0x2c
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b92:	e169      	b.n	8001e68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b94:	2201      	movs	r2, #1
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	f040 8158 	bne.w	8001e62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	4a9a      	ldr	r2, [pc, #616]	@ (8001e20 <HAL_GPIO_Init+0x2a0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d05e      	beq.n	8001c7a <HAL_GPIO_Init+0xfa>
 8001bbc:	4a98      	ldr	r2, [pc, #608]	@ (8001e20 <HAL_GPIO_Init+0x2a0>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d875      	bhi.n	8001cae <HAL_GPIO_Init+0x12e>
 8001bc2:	4a98      	ldr	r2, [pc, #608]	@ (8001e24 <HAL_GPIO_Init+0x2a4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d058      	beq.n	8001c7a <HAL_GPIO_Init+0xfa>
 8001bc8:	4a96      	ldr	r2, [pc, #600]	@ (8001e24 <HAL_GPIO_Init+0x2a4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d86f      	bhi.n	8001cae <HAL_GPIO_Init+0x12e>
 8001bce:	4a96      	ldr	r2, [pc, #600]	@ (8001e28 <HAL_GPIO_Init+0x2a8>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d052      	beq.n	8001c7a <HAL_GPIO_Init+0xfa>
 8001bd4:	4a94      	ldr	r2, [pc, #592]	@ (8001e28 <HAL_GPIO_Init+0x2a8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d869      	bhi.n	8001cae <HAL_GPIO_Init+0x12e>
 8001bda:	4a94      	ldr	r2, [pc, #592]	@ (8001e2c <HAL_GPIO_Init+0x2ac>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d04c      	beq.n	8001c7a <HAL_GPIO_Init+0xfa>
 8001be0:	4a92      	ldr	r2, [pc, #584]	@ (8001e2c <HAL_GPIO_Init+0x2ac>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d863      	bhi.n	8001cae <HAL_GPIO_Init+0x12e>
 8001be6:	4a92      	ldr	r2, [pc, #584]	@ (8001e30 <HAL_GPIO_Init+0x2b0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d046      	beq.n	8001c7a <HAL_GPIO_Init+0xfa>
 8001bec:	4a90      	ldr	r2, [pc, #576]	@ (8001e30 <HAL_GPIO_Init+0x2b0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d85d      	bhi.n	8001cae <HAL_GPIO_Init+0x12e>
 8001bf2:	2b12      	cmp	r3, #18
 8001bf4:	d82a      	bhi.n	8001c4c <HAL_GPIO_Init+0xcc>
 8001bf6:	2b12      	cmp	r3, #18
 8001bf8:	d859      	bhi.n	8001cae <HAL_GPIO_Init+0x12e>
 8001bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8001c00 <HAL_GPIO_Init+0x80>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c7b 	.word	0x08001c7b
 8001c04:	08001c55 	.word	0x08001c55
 8001c08:	08001c67 	.word	0x08001c67
 8001c0c:	08001ca9 	.word	0x08001ca9
 8001c10:	08001caf 	.word	0x08001caf
 8001c14:	08001caf 	.word	0x08001caf
 8001c18:	08001caf 	.word	0x08001caf
 8001c1c:	08001caf 	.word	0x08001caf
 8001c20:	08001caf 	.word	0x08001caf
 8001c24:	08001caf 	.word	0x08001caf
 8001c28:	08001caf 	.word	0x08001caf
 8001c2c:	08001caf 	.word	0x08001caf
 8001c30:	08001caf 	.word	0x08001caf
 8001c34:	08001caf 	.word	0x08001caf
 8001c38:	08001caf 	.word	0x08001caf
 8001c3c:	08001caf 	.word	0x08001caf
 8001c40:	08001caf 	.word	0x08001caf
 8001c44:	08001c5d 	.word	0x08001c5d
 8001c48:	08001c71 	.word	0x08001c71
 8001c4c:	4a79      	ldr	r2, [pc, #484]	@ (8001e34 <HAL_GPIO_Init+0x2b4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c52:	e02c      	b.n	8001cae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	623b      	str	r3, [r7, #32]
          break;
 8001c5a:	e029      	b.n	8001cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	3304      	adds	r3, #4
 8001c62:	623b      	str	r3, [r7, #32]
          break;
 8001c64:	e024      	b.n	8001cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e01f      	b.n	8001cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	330c      	adds	r3, #12
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e01a      	b.n	8001cb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d102      	bne.n	8001c88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c82:	2304      	movs	r3, #4
 8001c84:	623b      	str	r3, [r7, #32]
          break;
 8001c86:	e013      	b.n	8001cb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d105      	bne.n	8001c9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c90:	2308      	movs	r3, #8
 8001c92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	611a      	str	r2, [r3, #16]
          break;
 8001c9a:	e009      	b.n	8001cb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69fa      	ldr	r2, [r7, #28]
 8001ca4:	615a      	str	r2, [r3, #20]
          break;
 8001ca6:	e003      	b.n	8001cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e000      	b.n	8001cb0 <HAL_GPIO_Init+0x130>
          break;
 8001cae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2bff      	cmp	r3, #255	@ 0xff
 8001cb4:	d801      	bhi.n	8001cba <HAL_GPIO_Init+0x13a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	e001      	b.n	8001cbe <HAL_GPIO_Init+0x13e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2bff      	cmp	r3, #255	@ 0xff
 8001cc4:	d802      	bhi.n	8001ccc <HAL_GPIO_Init+0x14c>
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	e002      	b.n	8001cd2 <HAL_GPIO_Init+0x152>
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	3b08      	subs	r3, #8
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	210f      	movs	r1, #15
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	6a39      	ldr	r1, [r7, #32]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	431a      	orrs	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80b1 	beq.w	8001e62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d00:	4b4d      	ldr	r3, [pc, #308]	@ (8001e38 <HAL_GPIO_Init+0x2b8>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a4c      	ldr	r2, [pc, #304]	@ (8001e38 <HAL_GPIO_Init+0x2b8>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e38 <HAL_GPIO_Init+0x2b8>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d18:	4a48      	ldr	r2, [pc, #288]	@ (8001e3c <HAL_GPIO_Init+0x2bc>)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	220f      	movs	r2, #15
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a40      	ldr	r2, [pc, #256]	@ (8001e40 <HAL_GPIO_Init+0x2c0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d013      	beq.n	8001d6c <HAL_GPIO_Init+0x1ec>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3f      	ldr	r2, [pc, #252]	@ (8001e44 <HAL_GPIO_Init+0x2c4>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00d      	beq.n	8001d68 <HAL_GPIO_Init+0x1e8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e48 <HAL_GPIO_Init+0x2c8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d007      	beq.n	8001d64 <HAL_GPIO_Init+0x1e4>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a3d      	ldr	r2, [pc, #244]	@ (8001e4c <HAL_GPIO_Init+0x2cc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_GPIO_Init+0x1e0>
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e006      	b.n	8001d6e <HAL_GPIO_Init+0x1ee>
 8001d60:	2304      	movs	r3, #4
 8001d62:	e004      	b.n	8001d6e <HAL_GPIO_Init+0x1ee>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e002      	b.n	8001d6e <HAL_GPIO_Init+0x1ee>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_GPIO_Init+0x1ee>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d70:	f002 0203 	and.w	r2, r2, #3
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	4093      	lsls	r3, r2
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d7e:	492f      	ldr	r1, [pc, #188]	@ (8001e3c <HAL_GPIO_Init+0x2bc>)
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d98:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	492c      	ldr	r1, [pc, #176]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
 8001da4:	e006      	b.n	8001db4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001da6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	4928      	ldr	r1, [pc, #160]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dc0:	4b23      	ldr	r3, [pc, #140]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	4922      	ldr	r1, [pc, #136]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	60cb      	str	r3, [r1, #12]
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dce:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	491e      	ldr	r1, [pc, #120]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	4918      	ldr	r1, [pc, #96]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001df6:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	4914      	ldr	r1, [pc, #80]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d021      	beq.n	8001e54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	490e      	ldr	r1, [pc, #56]	@ (8001e50 <HAL_GPIO_Init+0x2d0>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e021      	b.n	8001e62 <HAL_GPIO_Init+0x2e2>
 8001e1e:	bf00      	nop
 8001e20:	10320000 	.word	0x10320000
 8001e24:	10310000 	.word	0x10310000
 8001e28:	10220000 	.word	0x10220000
 8001e2c:	10210000 	.word	0x10210000
 8001e30:	10120000 	.word	0x10120000
 8001e34:	10110000 	.word	0x10110000
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	40010800 	.word	0x40010800
 8001e44:	40010c00 	.word	0x40010c00
 8001e48:	40011000 	.word	0x40011000
 8001e4c:	40011400 	.word	0x40011400
 8001e50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e54:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <HAL_GPIO_Init+0x304>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	4909      	ldr	r1, [pc, #36]	@ (8001e84 <HAL_GPIO_Init+0x304>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	3301      	adds	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f47f ae8e 	bne.w	8001b94 <HAL_GPIO_Init+0x14>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	372c      	adds	r7, #44	@ 0x2c
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr
 8001e84:	40010400 	.word	0x40010400

08001e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e001      	b.n	8001eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	807b      	strh	r3, [r7, #2]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec6:	787b      	ldrb	r3, [r7, #1]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ecc:	887a      	ldrh	r2, [r7, #2]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ed2:	e003      	b.n	8001edc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	041a      	lsls	r2, r3, #16
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	611a      	str	r2, [r3, #16]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bc80      	pop	{r7}
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ef8:	887a      	ldrh	r2, [r7, #2]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	041a      	lsls	r2, r3, #16
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	43d9      	mvns	r1, r3
 8001f04:	887b      	ldrh	r3, [r7, #2]
 8001f06:	400b      	ands	r3, r1
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]
}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e12b      	b.n	8002182 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d106      	bne.n	8001f44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fa88 	bl	8001454 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2224      	movs	r2, #36	@ 0x24
 8001f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f7c:	f002 fd18 	bl	80049b0 <HAL_RCC_GetPCLK1Freq>
 8001f80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4a81      	ldr	r2, [pc, #516]	@ (800218c <HAL_I2C_Init+0x274>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d807      	bhi.n	8001f9c <HAL_I2C_Init+0x84>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a80      	ldr	r2, [pc, #512]	@ (8002190 <HAL_I2C_Init+0x278>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	bf94      	ite	ls
 8001f94:	2301      	movls	r3, #1
 8001f96:	2300      	movhi	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e006      	b.n	8001faa <HAL_I2C_Init+0x92>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4a7d      	ldr	r2, [pc, #500]	@ (8002194 <HAL_I2C_Init+0x27c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	bf94      	ite	ls
 8001fa4:	2301      	movls	r3, #1
 8001fa6:	2300      	movhi	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0e7      	b.n	8002182 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4a78      	ldr	r2, [pc, #480]	@ (8002198 <HAL_I2C_Init+0x280>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	0c9b      	lsrs	r3, r3, #18
 8001fbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a6a      	ldr	r2, [pc, #424]	@ (800218c <HAL_I2C_Init+0x274>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d802      	bhi.n	8001fec <HAL_I2C_Init+0xd4>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	e009      	b.n	8002000 <HAL_I2C_Init+0xe8>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	4a69      	ldr	r2, [pc, #420]	@ (800219c <HAL_I2C_Init+0x284>)
 8001ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffc:	099b      	lsrs	r3, r3, #6
 8001ffe:	3301      	adds	r3, #1
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	430b      	orrs	r3, r1
 8002006:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002012:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	495c      	ldr	r1, [pc, #368]	@ (800218c <HAL_I2C_Init+0x274>)
 800201c:	428b      	cmp	r3, r1
 800201e:	d819      	bhi.n	8002054 <HAL_I2C_Init+0x13c>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e59      	subs	r1, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fbb1 f3f3 	udiv	r3, r1, r3
 800202e:	1c59      	adds	r1, r3, #1
 8002030:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002034:	400b      	ands	r3, r1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_I2C_Init+0x138>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1e59      	subs	r1, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fbb1 f3f3 	udiv	r3, r1, r3
 8002048:	3301      	adds	r3, #1
 800204a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204e:	e051      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 8002050:	2304      	movs	r3, #4
 8002052:	e04f      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d111      	bne.n	8002080 <HAL_I2C_Init+0x168>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1e58      	subs	r0, r3, #1
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6859      	ldr	r1, [r3, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	440b      	add	r3, r1
 800206a:	fbb0 f3f3 	udiv	r3, r0, r3
 800206e:	3301      	adds	r3, #1
 8002070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf0c      	ite	eq
 8002078:	2301      	moveq	r3, #1
 800207a:	2300      	movne	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e012      	b.n	80020a6 <HAL_I2C_Init+0x18e>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	0099      	lsls	r1, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2C_Init+0x196>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e022      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10e      	bne.n	80020d4 <HAL_I2C_Init+0x1bc>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1e58      	subs	r0, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6859      	ldr	r1, [r3, #4]
 80020be:	460b      	mov	r3, r1
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	440b      	add	r3, r1
 80020c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020d2:	e00f      	b.n	80020f4 <HAL_I2C_Init+0x1dc>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1e58      	subs	r0, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6859      	ldr	r1, [r3, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	0099      	lsls	r1, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	6809      	ldr	r1, [r1, #0]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002122:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6911      	ldr	r1, [r2, #16]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68d2      	ldr	r2, [r2, #12]
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	430b      	orrs	r3, r1
 8002136:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0201 	orr.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2220      	movs	r2, #32
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	000186a0 	.word	0x000186a0
 8002190:	001e847f 	.word	0x001e847f
 8002194:	003d08ff 	.word	0x003d08ff
 8002198:	431bde83 	.word	0x431bde83
 800219c:	10624dd3 	.word	0x10624dd3

080021a0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b2:	2b80      	cmp	r3, #128	@ 0x80
 80021b4:	d103      	bne.n	80021be <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	611a      	str	r2, [r3, #16]
  }
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	461a      	mov	r2, r3
 80021d4:	460b      	mov	r3, r1
 80021d6:	817b      	strh	r3, [r7, #10]
 80021d8:	4613      	mov	r3, r2
 80021da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff fb0e 	bl	80017fc <HAL_GetTick>
 80021e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	f040 80e0 	bne.w	80023b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2319      	movs	r3, #25
 80021f6:	2201      	movs	r2, #1
 80021f8:	4970      	ldr	r1, [pc, #448]	@ (80023bc <HAL_I2C_Master_Transmit+0x1f4>)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f001 fdea 	bl	8003dd4 <I2C_WaitOnFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
 8002208:	e0d3      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2C_Master_Transmit+0x50>
 8002214:	2302      	movs	r3, #2
 8002216:	e0cc      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d007      	beq.n	800223e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800224c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2221      	movs	r2, #33	@ 0x21
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2210      	movs	r2, #16
 800225a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	893a      	ldrh	r2, [r7, #8]
 800226e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a50      	ldr	r2, [pc, #320]	@ (80023c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800227e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002280:	8979      	ldrh	r1, [r7, #10]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	6a3a      	ldr	r2, [r7, #32]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f001 fc7a 	bl	8003b80 <I2C_MasterRequestWrite>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e08d      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022ac:	e066      	b.n	800237c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	6a39      	ldr	r1, [r7, #32]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f001 fea8 	bl	8004008 <I2C_WaitOnTXEFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00d      	beq.n	80022da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d107      	bne.n	80022d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e06b      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d11b      	bne.n	8002350 <HAL_I2C_Master_Transmit+0x188>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d017      	beq.n	8002350 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	6a39      	ldr	r1, [r7, #32]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f001 fe9f 	bl	8004098 <I2C_WaitOnBTFFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	2b04      	cmp	r3, #4
 8002366:	d107      	bne.n	8002378 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002376:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e01a      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d194      	bne.n	80022ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	00100002 	.word	0x00100002
 80023c0:	ffff0000 	.word	0xffff0000

080023c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023e4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ec:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d003      	beq.n	80023fc <HAL_I2C_EV_IRQHandler+0x38>
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b40      	cmp	r3, #64	@ 0x40
 80023f8:	f040 80b1 	bne.w	800255e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10d      	bne.n	8002432 <HAL_I2C_EV_IRQHandler+0x6e>
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800241c:	d003      	beq.n	8002426 <HAL_I2C_EV_IRQHandler+0x62>
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002424:	d101      	bne.n	800242a <HAL_I2C_EV_IRQHandler+0x66>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_I2C_EV_IRQHandler+0x68>
 800242a:	2300      	movs	r3, #0
 800242c:	2b01      	cmp	r3, #1
 800242e:	f000 8114 	beq.w	800265a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <HAL_I2C_EV_IRQHandler+0x90>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f001 fece 	bl	80041e8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 fd74 	bl	8002f3a <I2C_Master_SB>
 8002452:	e083      	b.n	800255c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d008      	beq.n	8002470 <HAL_I2C_EV_IRQHandler+0xac>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fdeb 	bl	8003044 <I2C_Master_ADD10>
 800246e:	e075      	b.n	800255c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_I2C_EV_IRQHandler+0xc8>
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fe06 	bl	8003096 <I2C_Master_ADDR>
 800248a:	e067      	b.n	800255c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d036      	beq.n	8002504 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024a4:	f000 80db 	beq.w	800265e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00d      	beq.n	80024ce <HAL_I2C_EV_IRQHandler+0x10a>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_I2C_EV_IRQHandler+0x10a>
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d103      	bne.n	80024ce <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f9d4 	bl	8002874 <I2C_MasterTransmit_TXE>
 80024cc:	e046      	b.n	800255c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80c2 	beq.w	800265e <HAL_I2C_EV_IRQHandler+0x29a>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80bc 	beq.w	800265e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80024e6:	7bbb      	ldrb	r3, [r7, #14]
 80024e8:	2b21      	cmp	r3, #33	@ 0x21
 80024ea:	d103      	bne.n	80024f4 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fa5d 	bl	80029ac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024f2:	e0b4      	b.n	800265e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b40      	cmp	r3, #64	@ 0x40
 80024f8:	f040 80b1 	bne.w	800265e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 facb 	bl	8002a98 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002502:	e0ac      	b.n	800265e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800250e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002512:	f000 80a4 	beq.w	800265e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00d      	beq.n	800253c <HAL_I2C_EV_IRQHandler+0x178>
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_I2C_EV_IRQHandler+0x178>
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fb47 	bl	8002bc8 <I2C_MasterReceive_RXNE>
 800253a:	e00f      	b.n	800255c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 808b 	beq.w	800265e <HAL_I2C_EV_IRQHandler+0x29a>
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 8085 	beq.w	800265e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fbff 	bl	8002d58 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800255a:	e080      	b.n	800265e <HAL_I2C_EV_IRQHandler+0x29a>
 800255c:	e07f      	b.n	800265e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e007      	b.n	8002580 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d011      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x1ea>
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80025a4:	69b9      	ldr	r1, [r7, #24]
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 ffcc 	bl	8003544 <I2C_Slave_ADDR>
 80025ac:	e05a      	b.n	8002664 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_I2C_EV_IRQHandler+0x206>
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f001 f806 	bl	80035d4 <I2C_Slave_STOPF>
 80025c8:	e04c      	b.n	8002664 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	2b21      	cmp	r3, #33	@ 0x21
 80025ce:	d002      	beq.n	80025d6 <HAL_I2C_EV_IRQHandler+0x212>
 80025d0:	7bbb      	ldrb	r3, [r7, #14]
 80025d2:	2b29      	cmp	r3, #41	@ 0x29
 80025d4:	d120      	bne.n	8002618 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00d      	beq.n	80025fc <HAL_I2C_EV_IRQHandler+0x238>
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_I2C_EV_IRQHandler+0x238>
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d103      	bne.n	80025fc <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fee9 	bl	80033cc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025fa:	e032      	b.n	8002662 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d02d      	beq.n	8002662 <HAL_I2C_EV_IRQHandler+0x29e>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260c:	2b00      	cmp	r3, #0
 800260e:	d028      	beq.n	8002662 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 ff18 	bl	8003446 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002616:	e024      	b.n	8002662 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00d      	beq.n	800263e <HAL_I2C_EV_IRQHandler+0x27a>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_I2C_EV_IRQHandler+0x27a>
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 ff25 	bl	8003486 <I2C_SlaveReceive_RXNE>
 800263c:	e012      	b.n	8002664 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00d      	beq.n	8002664 <HAL_I2C_EV_IRQHandler+0x2a0>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 ff55 	bl	8003502 <I2C_SlaveReceive_BTF>
 8002658:	e004      	b.n	8002664 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002662:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002664:	3720      	adds	r7, #32
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b08a      	sub	sp, #40	@ 0x28
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800268c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d015      	beq.n	80026c4 <HAL_I2C_ER_IRQHandler+0x5a>
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80026b2:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026c2:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00d      	beq.n	80026ea <HAL_I2C_ER_IRQHandler+0x80>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	f043 0302 	orr.w	r3, r3, #2
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80026e8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03e      	beq.n	8002772 <HAL_I2C_ER_IRQHandler+0x108>
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d039      	beq.n	8002772 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 80026fe:	7efb      	ldrb	r3, [r7, #27]
 8002700:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002710:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002718:	7ebb      	ldrb	r3, [r7, #26]
 800271a:	2b20      	cmp	r3, #32
 800271c:	d112      	bne.n	8002744 <HAL_I2C_ER_IRQHandler+0xda>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10f      	bne.n	8002744 <HAL_I2C_ER_IRQHandler+0xda>
 8002724:	7cfb      	ldrb	r3, [r7, #19]
 8002726:	2b21      	cmp	r3, #33	@ 0x21
 8002728:	d008      	beq.n	800273c <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b29      	cmp	r3, #41	@ 0x29
 800272e:	d005      	beq.n	800273c <HAL_I2C_ER_IRQHandler+0xd2>
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b28      	cmp	r3, #40	@ 0x28
 8002734:	d106      	bne.n	8002744 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b21      	cmp	r3, #33	@ 0x21
 800273a:	d103      	bne.n	8002744 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f001 f879 	bl	8003834 <I2C_Slave_AF>
 8002742:	e016      	b.n	8002772 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800274c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002756:	7efb      	ldrb	r3, [r7, #27]
 8002758:	2b10      	cmp	r3, #16
 800275a:	d002      	beq.n	8002762 <HAL_I2C_ER_IRQHandler+0xf8>
 800275c:	7efb      	ldrb	r3, [r7, #27]
 800275e:	2b40      	cmp	r3, #64	@ 0x40
 8002760:	d107      	bne.n	8002772 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002770:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <HAL_I2C_ER_IRQHandler+0x12e>
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002796:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f001 f8b6 	bl	800391c <I2C_ITError>
  }
}
 80027b0:	bf00      	nop
 80027b2:	3728      	adds	r7, #40	@ 0x28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
 800280c:	4613      	mov	r3, r2
 800280e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002882:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800288a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002896:	2b00      	cmp	r3, #0
 8002898:	d150      	bne.n	800293c <I2C_MasterTransmit_TXE+0xc8>
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b21      	cmp	r3, #33	@ 0x21
 800289e:	d14d      	bne.n	800293c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d01d      	beq.n	80028e2 <I2C_MasterTransmit_TXE+0x6e>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b20      	cmp	r3, #32
 80028aa:	d01a      	beq.n	80028e2 <I2C_MasterTransmit_TXE+0x6e>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028b2:	d016      	beq.n	80028e2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028c2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2211      	movs	r2, #17
 80028c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ff6c 	bl	80027b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028e0:	e060      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80028f0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002900:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b40      	cmp	r3, #64	@ 0x40
 800291a:	d107      	bne.n	800292c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff81 	bl	800282c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800292a:	e03b      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ff3f 	bl	80027b8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800293a:	e033      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b21      	cmp	r3, #33	@ 0x21
 8002940:	d005      	beq.n	800294e <I2C_MasterTransmit_TXE+0xda>
 8002942:	7bbb      	ldrb	r3, [r7, #14]
 8002944:	2b40      	cmp	r3, #64	@ 0x40
 8002946:	d12d      	bne.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002948:	7bfb      	ldrb	r3, [r7, #15]
 800294a:	2b22      	cmp	r3, #34	@ 0x22
 800294c:	d12a      	bne.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d108      	bne.n	800296a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002966:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002968:	e01c      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b40      	cmp	r3, #64	@ 0x40
 8002974:	d103      	bne.n	800297e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f88e 	bl	8002a98 <I2C_MemoryTransmit_TXE_BTF>
}
 800297c:	e012      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	781a      	ldrb	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80029a2:	e7ff      	b.n	80029a4 <I2C_MasterTransmit_TXE+0x130>
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b21      	cmp	r3, #33	@ 0x21
 80029c4:	d164      	bne.n	8002a90 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d012      	beq.n	80029f6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80029f4:	e04c      	b.n	8002a90 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d01d      	beq.n	8002a38 <I2C_MasterTransmit_BTF+0x8c>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d01a      	beq.n	8002a38 <I2C_MasterTransmit_BTF+0x8c>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a08:	d016      	beq.n	8002a38 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a18:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2211      	movs	r2, #17
 8002a1e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fec1 	bl	80027b8 <HAL_I2C_MasterTxCpltCallback>
}
 8002a36:	e02b      	b.n	8002a90 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a46:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a56:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b40      	cmp	r3, #64	@ 0x40
 8002a70:	d107      	bne.n	8002a82 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fed6 	bl	800282c <HAL_I2C_MemTxCpltCallback>
}
 8002a80:	e006      	b.n	8002a90 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fe94 	bl	80027b8 <HAL_I2C_MasterTxCpltCallback>
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d11d      	bne.n	8002aec <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d10b      	bne.n	8002ad0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002ace:	e077      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	121b      	asrs	r3, r3, #8
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002aea:	e069      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d10b      	bne.n	8002b0c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b04:	1c5a      	adds	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b0a:	e059      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d152      	bne.n	8002bba <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b22      	cmp	r3, #34	@ 0x22
 8002b18:	d10d      	bne.n	8002b36 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b28:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002b34:	e044      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b21      	cmp	r3, #33	@ 0x21
 8002b44:	d112      	bne.n	8002b6c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002b6a:	e029      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d124      	bne.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002b76:	7bfb      	ldrb	r3, [r7, #15]
 8002b78:	2b21      	cmp	r3, #33	@ 0x21
 8002b7a:	d121      	bne.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b8a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fe3a 	bl	800282c <HAL_I2C_MemTxCpltCallback>
}
 8002bb8:	e002      	b.n	8002bc0 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff faf0 	bl	80021a0 <I2C_Flush_DR>
}
 8002bc0:	bf00      	nop
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b22      	cmp	r3, #34	@ 0x22
 8002bda:	f040 80b9 	bne.w	8002d50 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be2:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d921      	bls.n	8002c36 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	f040 8096 	bne.w	8002d50 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c32:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002c34:	e08c      	b.n	8002d50 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d07f      	beq.n	8002d3e <I2C_MasterReceive_RXNE+0x176>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d002      	beq.n	8002c4a <I2C_MasterReceive_RXNE+0x82>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d179      	bne.n	8002d3e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f001 fa6c 	bl	8004128 <I2C_WaitOnSTOPRequestThroughIT>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d14c      	bne.n	8002cf0 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c64:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c74:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b40      	cmp	r3, #64	@ 0x40
 8002cae:	d10a      	bne.n	8002cc6 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff fdbd 	bl	800283e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cc4:	e044      	b.n	8002d50 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d002      	beq.n	8002cda <I2C_MasterReceive_RXNE+0x112>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d103      	bne.n	8002ce2 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ce0:	e002      	b.n	8002ce8 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2212      	movs	r2, #18
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff fd6e 	bl	80027ca <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cee:	e02f      	b.n	8002d50 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cfe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fd8a 	bl	8002850 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d3c:	e008      	b.n	8002d50 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d4c:	605a      	str	r2, [r3, #4]
}
 8002d4e:	e7ff      	b.n	8002d50 <I2C_MasterReceive_RXNE+0x188>
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d11b      	bne.n	8002da8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d7e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002da6:	e0c4      	b.n	8002f32 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d129      	bne.n	8002e06 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dc0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d00a      	beq.n	8002dde <I2C_MasterReceive_BTF+0x86>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d007      	beq.n	8002dde <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ddc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002e04:	e095      	b.n	8002f32 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d17d      	bne.n	8002f0c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d002      	beq.n	8002e1c <I2C_MasterReceive_BTF+0xc4>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2b10      	cmp	r3, #16
 8002e1a:	d108      	bne.n	8002e2e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2a:	601a      	str	r2, [r3, #0]
 8002e2c:	e016      	b.n	8002e5c <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d002      	beq.n	8002e3a <I2C_MasterReceive_BTF+0xe2>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d108      	bne.n	8002e4c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e007      	b.n	8002e5c <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	691a      	ldr	r2, [r3, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002eb6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b40      	cmp	r3, #64	@ 0x40
 8002eca:	d10a      	bne.n	8002ee2 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fcaf 	bl	800283e <HAL_I2C_MemRxCpltCallback>
}
 8002ee0:	e027      	b.n	8002f32 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d002      	beq.n	8002ef6 <I2C_MasterReceive_BTF+0x19e>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d103      	bne.n	8002efe <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002efc:	e002      	b.n	8002f04 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2212      	movs	r2, #18
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff fc60 	bl	80027ca <HAL_I2C_MasterRxCpltCallback>
}
 8002f0a:	e012      	b.n	8002f32 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b40      	cmp	r3, #64	@ 0x40
 8002f4c:	d117      	bne.n	8002f7e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f66:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f68:	e067      	b.n	800303a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]
}
 8002f7c:	e05d      	b.n	800303a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f86:	d133      	bne.n	8002ff0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b21      	cmp	r3, #33	@ 0x21
 8002f92:	d109      	bne.n	8002fa8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fa4:	611a      	str	r2, [r3, #16]
 8002fa6:	e008      	b.n	8002fba <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d004      	beq.n	8002fcc <I2C_Master_SB+0x92>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d108      	bne.n	8002fde <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d032      	beq.n	800303a <I2C_Master_SB+0x100>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d02d      	beq.n	800303a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fec:	605a      	str	r2, [r3, #4]
}
 8002fee:	e024      	b.n	800303a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10e      	bne.n	8003016 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	11db      	asrs	r3, r3, #7
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f003 0306 	and.w	r3, r3, #6
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f063 030f 	orn	r3, r3, #15
 800300c:	b2da      	uxtb	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]
}
 8003014:	e011      	b.n	800303a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10d      	bne.n	800303a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003022:	b29b      	uxth	r3, r3
 8003024:	11db      	asrs	r3, r3, #7
 8003026:	b2db      	uxtb	r3, r3
 8003028:	f003 0306 	and.w	r3, r3, #6
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f063 030e 	orn	r3, r3, #14
 8003032:	b2da      	uxtb	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	611a      	str	r2, [r3, #16]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003050:	b2da      	uxtb	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <I2C_Master_ADD10+0x26>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d108      	bne.n	800307c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00c      	beq.n	800308c <I2C_Master_ADD10+0x48>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800308a:	605a      	str	r2, [r3, #4]
  }
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003096:	b480      	push	{r7}
 8003098:	b091      	sub	sp, #68	@ 0x44
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b22      	cmp	r3, #34	@ 0x22
 80030be:	f040 8174 	bne.w	80033aa <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <I2C_Master_ADDR+0x54>
 80030ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80030ce:	2b40      	cmp	r3, #64	@ 0x40
 80030d0:	d10b      	bne.n	80030ea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80030e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e8:	e16b      	b.n	80033c2 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11d      	bne.n	800312e <I2C_Master_ADDR+0x98>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80030fa:	d118      	bne.n	800312e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fc:	2300      	movs	r3, #0
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003120:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	651a      	str	r2, [r3, #80]	@ 0x50
 800312c:	e149      	b.n	80033c2 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d113      	bne.n	8003160 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003138:	2300      	movs	r3, #0
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800314c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e120      	b.n	80033a2 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b01      	cmp	r3, #1
 8003168:	f040 808a 	bne.w	8003280 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800316c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003172:	d137      	bne.n	80031e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003182:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800318e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003192:	d113      	bne.n	80031bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a4:	2300      	movs	r3, #0
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	e0f2      	b.n	80033a2 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031bc:	2300      	movs	r3, #0
 80031be:	623b      	str	r3, [r7, #32]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	623b      	str	r3, [r7, #32]
 80031d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	e0de      	b.n	80033a2 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80031e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d02e      	beq.n	8003248 <I2C_Master_ADDR+0x1b2>
 80031ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d02b      	beq.n	8003248 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	2b12      	cmp	r3, #18
 80031f4:	d102      	bne.n	80031fc <I2C_Master_ADDR+0x166>
 80031f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d125      	bne.n	8003248 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80031fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d00e      	beq.n	8003220 <I2C_Master_ADDR+0x18a>
 8003202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003204:	2b02      	cmp	r3, #2
 8003206:	d00b      	beq.n	8003220 <I2C_Master_ADDR+0x18a>
 8003208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800320a:	2b10      	cmp	r3, #16
 800320c:	d008      	beq.n	8003220 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	e007      	b.n	8003230 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800322e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	e0ac      	b.n	80033a2 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003256:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003258:	2300      	movs	r3, #0
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	61bb      	str	r3, [r7, #24]
 800326c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	e090      	b.n	80033a2 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d158      	bne.n	800333c <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800328a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328c:	2b04      	cmp	r3, #4
 800328e:	d021      	beq.n	80032d4 <I2C_Master_ADDR+0x23e>
 8003290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003292:	2b02      	cmp	r3, #2
 8003294:	d01e      	beq.n	80032d4 <I2C_Master_ADDR+0x23e>
 8003296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003298:	2b10      	cmp	r3, #16
 800329a:	d01b      	beq.n	80032d4 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032aa:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	e012      	b.n	80032fa <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032e2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003308:	d14b      	bne.n	80033a2 <I2C_Master_ADDR+0x30c>
 800330a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003310:	d00b      	beq.n	800332a <I2C_Master_ADDR+0x294>
 8003312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003314:	2b01      	cmp	r3, #1
 8003316:	d008      	beq.n	800332a <I2C_Master_ADDR+0x294>
 8003318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331a:	2b08      	cmp	r3, #8
 800331c:	d005      	beq.n	800332a <I2C_Master_ADDR+0x294>
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	2b10      	cmp	r3, #16
 8003322:	d002      	beq.n	800332a <I2C_Master_ADDR+0x294>
 8003324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003326:	2b20      	cmp	r3, #32
 8003328:	d13b      	bne.n	80033a2 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	e032      	b.n	80033a2 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800334a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003356:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800335a:	d117      	bne.n	800338c <I2C_Master_ADDR+0x2f6>
 800335c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003362:	d00b      	beq.n	800337c <I2C_Master_ADDR+0x2e6>
 8003364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003366:	2b01      	cmp	r3, #1
 8003368:	d008      	beq.n	800337c <I2C_Master_ADDR+0x2e6>
 800336a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800336c:	2b08      	cmp	r3, #8
 800336e:	d005      	beq.n	800337c <I2C_Master_ADDR+0x2e6>
 8003370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003372:	2b10      	cmp	r3, #16
 8003374:	d002      	beq.n	800337c <I2C_Master_ADDR+0x2e6>
 8003376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003378:	2b20      	cmp	r3, #32
 800337a:	d107      	bne.n	800338c <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800338a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80033a8:	e00b      	b.n	80033c2 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
}
 80033c0:	e7ff      	b.n	80033c2 <I2C_Master_ADDR+0x32c>
 80033c2:	bf00      	nop
 80033c4:	3744      	adds	r7, #68	@ 0x44
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d02b      	beq.n	800343e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d114      	bne.n	800343e <I2C_SlaveTransmit_TXE+0x72>
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b29      	cmp	r3, #41	@ 0x29
 8003418:	d111      	bne.n	800343e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003428:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2221      	movs	r2, #33	@ 0x21
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2228      	movs	r2, #40	@ 0x28
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff f9cf 	bl	80027dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d011      	beq.n	800347c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003494:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d02c      	beq.n	80034fa <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d114      	bne.n	80034fa <I2C_SlaveReceive_RXNE+0x74>
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80034d4:	d111      	bne.n	80034fa <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034e4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2222      	movs	r2, #34	@ 0x22
 80034ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2228      	movs	r2, #40	@ 0x28
 80034f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff f97a 	bl	80027ee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d012      	beq.n	800353a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr

08003544 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800355e:	2b28      	cmp	r3, #40	@ 0x28
 8003560:	d125      	bne.n	80035ae <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003570:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	81bb      	strh	r3, [r7, #12]
 8003590:	e002      	b.n	8003598 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80035a0:	89ba      	ldrh	r2, [r7, #12]
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	4619      	mov	r1, r3
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff f92a 	bl	8002800 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035ac:	e00e      	b.n	80035cc <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035f2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003620:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003630:	d172      	bne.n	8003718 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	2b22      	cmp	r3, #34	@ 0x22
 8003636:	d002      	beq.n	800363e <I2C_Slave_STOPF+0x6a>
 8003638:	7bfb      	ldrb	r3, [r7, #15]
 800363a:	2b2a      	cmp	r3, #42	@ 0x2a
 800363c:	d135      	bne.n	80036aa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	b29a      	uxth	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	f043 0204 	orr.w	r2, r3, #4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003670:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fa74 	bl	8001b64 <HAL_DMA_GetState>
 800367c:	4603      	mov	r3, r0
 800367e:	2b01      	cmp	r3, #1
 8003680:	d049      	beq.n	8003716 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003686:	4a69      	ldr	r2, [pc, #420]	@ (800382c <I2C_Slave_STOPF+0x258>)
 8003688:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe f9f0 	bl	8001a74 <HAL_DMA_Abort_IT>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d03d      	beq.n	8003716 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036a4:	4610      	mov	r0, r2
 80036a6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036a8:	e035      	b.n	8003716 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f043 0204 	orr.w	r2, r3, #4
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7fe fa3e 	bl	8001b64 <HAL_DMA_GetState>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d014      	beq.n	8003718 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f2:	4a4e      	ldr	r2, [pc, #312]	@ (800382c <I2C_Slave_STOPF+0x258>)
 80036f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe f9ba 	bl	8001a74 <HAL_DMA_Abort_IT>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003710:	4610      	mov	r0, r2
 8003712:	4798      	blx	r3
 8003714:	e000      	b.n	8003718 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003716:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d03e      	beq.n	80037a0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b04      	cmp	r3, #4
 800372e:	d112      	bne.n	8003756 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003760:	2b40      	cmp	r3, #64	@ 0x40
 8003762:	d112      	bne.n	800378a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	f043 0204 	orr.w	r2, r3, #4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f8b7 	bl	800391c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80037ae:	e039      	b.n	8003824 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80037b4:	d109      	bne.n	80037ca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2228      	movs	r2, #40	@ 0x28
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff f812 	bl	80027ee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b28      	cmp	r3, #40	@ 0x28
 80037d4:	d111      	bne.n	80037fa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a15      	ldr	r2, [pc, #84]	@ (8003830 <I2C_Slave_STOPF+0x25c>)
 80037da:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff f811 	bl	800281a <HAL_I2C_ListenCpltCallback>
}
 80037f8:	e014      	b.n	8003824 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	2b22      	cmp	r3, #34	@ 0x22
 8003800:	d002      	beq.n	8003808 <I2C_Slave_STOPF+0x234>
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	2b22      	cmp	r3, #34	@ 0x22
 8003806:	d10d      	bne.n	8003824 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fe ffe5 	bl	80027ee <HAL_I2C_SlaveRxCpltCallback>
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	08003c85 	.word	0x08003c85
 8003830:	ffff0000 	.word	0xffff0000

08003834 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003842:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d002      	beq.n	8003856 <I2C_Slave_AF+0x22>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b20      	cmp	r3, #32
 8003854:	d129      	bne.n	80038aa <I2C_Slave_AF+0x76>
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b28      	cmp	r3, #40	@ 0x28
 800385a:	d126      	bne.n	80038aa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a2e      	ldr	r2, [pc, #184]	@ (8003918 <I2C_Slave_AF+0xe4>)
 8003860:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003870:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800387a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fe ffb9 	bl	800281a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80038a8:	e031      	b.n	800390e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b21      	cmp	r3, #33	@ 0x21
 80038ae:	d129      	bne.n	8003904 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a19      	ldr	r2, [pc, #100]	@ (8003918 <I2C_Slave_AF+0xe4>)
 80038b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2221      	movs	r2, #33	@ 0x21
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038da:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038e4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038f4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f7fe fc52 	bl	80021a0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7fe ff6d 	bl	80027dc <HAL_I2C_SlaveTxCpltCallback>
}
 8003902:	e004      	b.n	800390e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800390c:	615a      	str	r2, [r3, #20]
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	ffff0000 	.word	0xffff0000

0800391c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003932:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003934:	7bbb      	ldrb	r3, [r7, #14]
 8003936:	2b10      	cmp	r3, #16
 8003938:	d002      	beq.n	8003940 <I2C_ITError+0x24>
 800393a:	7bbb      	ldrb	r3, [r7, #14]
 800393c:	2b40      	cmp	r3, #64	@ 0x40
 800393e:	d10a      	bne.n	8003956 <I2C_ITError+0x3a>
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b22      	cmp	r3, #34	@ 0x22
 8003944:	d107      	bne.n	8003956 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003954:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800395c:	2b28      	cmp	r3, #40	@ 0x28
 800395e:	d107      	bne.n	8003970 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2228      	movs	r2, #40	@ 0x28
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800396e:	e015      	b.n	800399c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800397a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800397e:	d00a      	beq.n	8003996 <I2C_ITError+0x7a>
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b60      	cmp	r3, #96	@ 0x60
 8003984:	d007      	beq.n	8003996 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039aa:	d162      	bne.n	8003a72 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039ba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039c0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d020      	beq.n	8003a0c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003b78 <I2C_ITError+0x25c>)
 80039d0:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe f84c 	bl	8001a74 <HAL_DMA_Abort_IT>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8089 	beq.w	8003af6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a06:	4610      	mov	r0, r2
 8003a08:	4798      	blx	r3
 8003a0a:	e074      	b.n	8003af6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a10:	4a59      	ldr	r2, [pc, #356]	@ (8003b78 <I2C_ITError+0x25c>)
 8003a12:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fe f82b 	bl	8001a74 <HAL_DMA_Abort_IT>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d068      	beq.n	8003af6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	d10b      	bne.n	8003a4a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4798      	blx	r3
 8003a70:	e041      	b.n	8003af6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b60      	cmp	r3, #96	@ 0x60
 8003a7c:	d125      	bne.n	8003aca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a96:	2b40      	cmp	r3, #64	@ 0x40
 8003a98:	d10b      	bne.n	8003ab2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fe fecd 	bl	8002862 <HAL_I2C_AbortCpltCallback>
 8003ac8:	e015      	b.n	8003af6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad4:	2b40      	cmp	r3, #64	@ 0x40
 8003ad6:	d10b      	bne.n	8003af0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fe fead 	bl	8002850 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10e      	bne.n	8003b24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d104      	bne.n	8003b24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b32:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b3a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b04      	cmp	r3, #4
 8003b46:	d113      	bne.n	8003b70 <I2C_ITError+0x254>
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b28      	cmp	r3, #40	@ 0x28
 8003b4c:	d110      	bne.n	8003b70 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <I2C_ITError+0x260>)
 8003b52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fe fe55 	bl	800281a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	08003c85 	.word	0x08003c85
 8003b7c:	ffff0000 	.word	0xffff0000

08003b80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b088      	sub	sp, #32
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d006      	beq.n	8003baa <I2C_MasterRequestWrite+0x2a>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d003      	beq.n	8003baa <I2C_MasterRequestWrite+0x2a>
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ba8:	d108      	bne.n	8003bbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e00b      	b.n	8003bd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	2b12      	cmp	r3, #18
 8003bc2:	d107      	bne.n	8003bd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f8f7 	bl	8003dd4 <I2C_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00d      	beq.n	8003c08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bfa:	d103      	bne.n	8003c04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e035      	b.n	8003c74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c10:	d108      	bne.n	8003c24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c12:	897b      	ldrh	r3, [r7, #10]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c20:	611a      	str	r2, [r3, #16]
 8003c22:	e01b      	b.n	8003c5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c24:	897b      	ldrh	r3, [r7, #10]
 8003c26:	11db      	asrs	r3, r3, #7
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	f003 0306 	and.w	r3, r3, #6
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f063 030f 	orn	r3, r3, #15
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	490e      	ldr	r1, [pc, #56]	@ (8003c7c <I2C_MasterRequestWrite+0xfc>)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f940 	bl	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e010      	b.n	8003c74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c52:	897b      	ldrh	r3, [r7, #10]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	4907      	ldr	r1, [pc, #28]	@ (8003c80 <I2C_MasterRequestWrite+0x100>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f930 	bl	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	00010008 	.word	0x00010008
 8003c80:	00010002 	.word	0x00010002

08003c84 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003dcc <I2C_DMAAbort+0x148>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	08db      	lsrs	r3, r3, #3
 8003ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8003dd0 <I2C_DMAAbort+0x14c>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	0a1a      	lsrs	r2, r3, #8
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	00da      	lsls	r2, r3, #3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d106      	bne.n	8003ccc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f043 0220 	orr.w	r2, r3, #32
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003cca:	e00a      	b.n	8003ce2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ce0:	d0ea      	beq.n	8003cb8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cee:	2200      	movs	r2, #0
 8003cf0:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfe:	2200      	movs	r2, #0
 8003d00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d10:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d24:	2200      	movs	r2, #0
 8003d26:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d34:	2200      	movs	r2, #0
 8003d36:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b60      	cmp	r3, #96	@ 0x60
 8003d52:	d10e      	bne.n	8003d72 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2200      	movs	r2, #0
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d6a:	6978      	ldr	r0, [r7, #20]
 8003d6c:	f7fe fd79 	bl	8002862 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d70:	e027      	b.n	8003dc2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d78:	2b28      	cmp	r3, #40	@ 0x28
 8003d7a:	d117      	bne.n	8003dac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2228      	movs	r2, #40	@ 0x28
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003daa:	e007      	b.n	8003dbc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003dbc:	6978      	ldr	r0, [r7, #20]
 8003dbe:	f7fe fd47 	bl	8002850 <HAL_I2C_ErrorCallback>
}
 8003dc2:	bf00      	nop
 8003dc4:	3718      	adds	r7, #24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000010 	.word	0x20000010
 8003dd0:	14f8b589 	.word	0x14f8b589

08003dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de4:	e048      	b.n	8003e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dec:	d044      	beq.n	8003e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dee:	f7fd fd05 	bl	80017fc <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d139      	bne.n	8003e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	0c1b      	lsrs	r3, r3, #16
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d10d      	bne.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	43da      	mvns	r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	e00c      	b.n	8003e44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	43da      	mvns	r2, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d116      	bne.n	8003e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2220      	movs	r2, #32
 8003e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e64:	f043 0220 	orr.w	r2, r3, #32
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e023      	b.n	8003ec0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	0c1b      	lsrs	r3, r3, #16
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d10d      	bne.n	8003e9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	43da      	mvns	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	e00c      	b.n	8003eb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	43da      	mvns	r2, r3
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d093      	beq.n	8003de6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
 8003ed4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed6:	e071      	b.n	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ee6:	d123      	bne.n	8003f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	f043 0204 	orr.w	r2, r3, #4
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e067      	b.n	8004000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f36:	d041      	beq.n	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f38:	f7fd fc60 	bl	80017fc <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d302      	bcc.n	8003f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d136      	bne.n	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d10c      	bne.n	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	4013      	ands	r3, r2
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf14      	ite	ne
 8003f6a:	2301      	movne	r3, #1
 8003f6c:	2300      	moveq	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	e00b      	b.n	8003f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	43da      	mvns	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	f043 0220 	orr.w	r2, r3, #32
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e021      	b.n	8004000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	0c1b      	lsrs	r3, r3, #16
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d10c      	bne.n	8003fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	e00b      	b.n	8003ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	43da      	mvns	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4013      	ands	r3, r2
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f47f af6d 	bne.w	8003ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004014:	e034      	b.n	8004080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 f8b8 	bl	800418c <I2C_IsAcknowledgeFailed>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e034      	b.n	8004090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d028      	beq.n	8004080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402e:	f7fd fbe5 	bl	80017fc <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	d302      	bcc.n	8004044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d11d      	bne.n	8004080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800404e:	2b80      	cmp	r3, #128	@ 0x80
 8004050:	d016      	beq.n	8004080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e007      	b.n	8004090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408a:	2b80      	cmp	r3, #128	@ 0x80
 800408c:	d1c3      	bne.n	8004016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040a4:	e034      	b.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f870 	bl	800418c <I2C_IsAcknowledgeFailed>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e034      	b.n	8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d028      	beq.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040be:	f7fd fb9d 	bl	80017fc <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d302      	bcc.n	80040d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d11d      	bne.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d016      	beq.n	8004110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fc:	f043 0220 	orr.w	r2, r3, #32
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e007      	b.n	8004120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0304 	and.w	r3, r3, #4
 800411a:	2b04      	cmp	r3, #4
 800411c:	d1c3      	bne.n	80040a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004134:	4b13      	ldr	r3, [pc, #76]	@ (8004184 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	08db      	lsrs	r3, r3, #3
 800413a:	4a13      	ldr	r2, [pc, #76]	@ (8004188 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	0a1a      	lsrs	r2, r3, #8
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3b01      	subs	r3, #1
 800414e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e008      	b.n	8004178 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004174:	d0e9      	beq.n	800414a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20000010 	.word	0x20000010
 8004188:	14f8b589 	.word	0x14f8b589

0800418c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a2:	d11b      	bne.n	80041dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80041ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	f043 0204 	orr.w	r2, r3, #4
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80041f8:	d103      	bne.n	8004202 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004200:	e007      	b.n	8004212 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004206:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800420a:	d102      	bne.n	8004212 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2208      	movs	r2, #8
 8004210:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e272      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8087 	beq.w	800434a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800423c:	4b92      	ldr	r3, [pc, #584]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 030c 	and.w	r3, r3, #12
 8004244:	2b04      	cmp	r3, #4
 8004246:	d00c      	beq.n	8004262 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004248:	4b8f      	ldr	r3, [pc, #572]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d112      	bne.n	800427a <HAL_RCC_OscConfig+0x5e>
 8004254:	4b8c      	ldr	r3, [pc, #560]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004260:	d10b      	bne.n	800427a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004262:	4b89      	ldr	r3, [pc, #548]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d06c      	beq.n	8004348 <HAL_RCC_OscConfig+0x12c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d168      	bne.n	8004348 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e24c      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004282:	d106      	bne.n	8004292 <HAL_RCC_OscConfig+0x76>
 8004284:	4b80      	ldr	r3, [pc, #512]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7f      	ldr	r2, [pc, #508]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e02e      	b.n	80042f0 <HAL_RCC_OscConfig+0xd4>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x98>
 800429a:	4b7b      	ldr	r3, [pc, #492]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a7a      	ldr	r2, [pc, #488]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042a4:	6013      	str	r3, [r2, #0]
 80042a6:	4b78      	ldr	r3, [pc, #480]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a77      	ldr	r2, [pc, #476]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	e01d      	b.n	80042f0 <HAL_RCC_OscConfig+0xd4>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCC_OscConfig+0xbc>
 80042be:	4b72      	ldr	r3, [pc, #456]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a71      	ldr	r2, [pc, #452]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	e00b      	b.n	80042f0 <HAL_RCC_OscConfig+0xd4>
 80042d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6a      	ldr	r2, [pc, #424]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b68      	ldr	r3, [pc, #416]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a67      	ldr	r2, [pc, #412]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d013      	beq.n	8004320 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f8:	f7fd fa80 	bl	80017fc <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004300:	f7fd fa7c 	bl	80017fc <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b64      	cmp	r3, #100	@ 0x64
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e200      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004312:	4b5d      	ldr	r3, [pc, #372]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0xe4>
 800431e:	e014      	b.n	800434a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fd fa6c 	bl	80017fc <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004328:	f7fd fa68 	bl	80017fc <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	@ 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e1ec      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433a:	4b53      	ldr	r3, [pc, #332]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1f0      	bne.n	8004328 <HAL_RCC_OscConfig+0x10c>
 8004346:	e000      	b.n	800434a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d063      	beq.n	800441e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004356:	4b4c      	ldr	r3, [pc, #304]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00b      	beq.n	800437a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004362:	4b49      	ldr	r3, [pc, #292]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 030c 	and.w	r3, r3, #12
 800436a:	2b08      	cmp	r3, #8
 800436c:	d11c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x18c>
 800436e:	4b46      	ldr	r3, [pc, #280]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d116      	bne.n	80043a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437a:	4b43      	ldr	r3, [pc, #268]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d005      	beq.n	8004392 <HAL_RCC_OscConfig+0x176>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e1c0      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004392:	4b3d      	ldr	r3, [pc, #244]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4939      	ldr	r1, [pc, #228]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a6:	e03a      	b.n	800441e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d020      	beq.n	80043f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b0:	4b36      	ldr	r3, [pc, #216]	@ (800448c <HAL_RCC_OscConfig+0x270>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fd fa21 	bl	80017fc <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043be:	f7fd fa1d 	bl	80017fc <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e1a1      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d0f0      	beq.n	80043be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4927      	ldr	r1, [pc, #156]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	600b      	str	r3, [r1, #0]
 80043f0:	e015      	b.n	800441e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f2:	4b26      	ldr	r3, [pc, #152]	@ (800448c <HAL_RCC_OscConfig+0x270>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fd fa00 	bl	80017fc <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004400:	f7fd f9fc 	bl	80017fc <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e180      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b00      	cmp	r3, #0
 8004428:	d03a      	beq.n	80044a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d019      	beq.n	8004466 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004432:	4b17      	ldr	r3, [pc, #92]	@ (8004490 <HAL_RCC_OscConfig+0x274>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004438:	f7fd f9e0 	bl	80017fc <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004440:	f7fd f9dc 	bl	80017fc <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e160      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004452:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <HAL_RCC_OscConfig+0x26c>)
 8004454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800445e:	2001      	movs	r0, #1
 8004460:	f000 faba 	bl	80049d8 <RCC_Delay>
 8004464:	e01c      	b.n	80044a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004466:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <HAL_RCC_OscConfig+0x274>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446c:	f7fd f9c6 	bl	80017fc <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004472:	e00f      	b.n	8004494 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004474:	f7fd f9c2 	bl	80017fc <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d908      	bls.n	8004494 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e146      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	42420000 	.word	0x42420000
 8004490:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004494:	4b92      	ldr	r3, [pc, #584]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e9      	bne.n	8004474 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 80a6 	beq.w	80045fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b2:	4b8b      	ldr	r3, [pc, #556]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044be:	4b88      	ldr	r3, [pc, #544]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	4a87      	ldr	r2, [pc, #540]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	61d3      	str	r3, [r2, #28]
 80044ca:	4b85      	ldr	r3, [pc, #532]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	4b82      	ldr	r3, [pc, #520]	@ (80046e4 <HAL_RCC_OscConfig+0x4c8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d118      	bne.n	8004518 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e6:	4b7f      	ldr	r3, [pc, #508]	@ (80046e4 <HAL_RCC_OscConfig+0x4c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a7e      	ldr	r2, [pc, #504]	@ (80046e4 <HAL_RCC_OscConfig+0x4c8>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f2:	f7fd f983 	bl	80017fc <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fa:	f7fd f97f 	bl	80017fc <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b64      	cmp	r3, #100	@ 0x64
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e103      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	4b75      	ldr	r3, [pc, #468]	@ (80046e4 <HAL_RCC_OscConfig+0x4c8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x312>
 8004520:	4b6f      	ldr	r3, [pc, #444]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	4a6e      	ldr	r2, [pc, #440]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6213      	str	r3, [r2, #32]
 800452c:	e02d      	b.n	800458a <HAL_RCC_OscConfig+0x36e>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x334>
 8004536:	4b6a      	ldr	r3, [pc, #424]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	4a69      	ldr	r2, [pc, #420]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	f023 0301 	bic.w	r3, r3, #1
 8004540:	6213      	str	r3, [r2, #32]
 8004542:	4b67      	ldr	r3, [pc, #412]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	4a66      	ldr	r2, [pc, #408]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	6213      	str	r3, [r2, #32]
 800454e:	e01c      	b.n	800458a <HAL_RCC_OscConfig+0x36e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	2b05      	cmp	r3, #5
 8004556:	d10c      	bne.n	8004572 <HAL_RCC_OscConfig+0x356>
 8004558:	4b61      	ldr	r3, [pc, #388]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	4a60      	ldr	r2, [pc, #384]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	f043 0304 	orr.w	r3, r3, #4
 8004562:	6213      	str	r3, [r2, #32]
 8004564:	4b5e      	ldr	r3, [pc, #376]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4a5d      	ldr	r2, [pc, #372]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6213      	str	r3, [r2, #32]
 8004570:	e00b      	b.n	800458a <HAL_RCC_OscConfig+0x36e>
 8004572:	4b5b      	ldr	r3, [pc, #364]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4a5a      	ldr	r2, [pc, #360]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	6213      	str	r3, [r2, #32]
 800457e:	4b58      	ldr	r3, [pc, #352]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004580:	6a1b      	ldr	r3, [r3, #32]
 8004582:	4a57      	ldr	r2, [pc, #348]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d015      	beq.n	80045be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004592:	f7fd f933 	bl	80017fc <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004598:	e00a      	b.n	80045b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459a:	f7fd f92f 	bl	80017fc <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0b1      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b0:	4b4b      	ldr	r3, [pc, #300]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0ee      	beq.n	800459a <HAL_RCC_OscConfig+0x37e>
 80045bc:	e014      	b.n	80045e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045be:	f7fd f91d 	bl	80017fc <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c4:	e00a      	b.n	80045dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fd f919 	bl	80017fc <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e09b      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045dc:	4b40      	ldr	r3, [pc, #256]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1ee      	bne.n	80045c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ee:	4b3c      	ldr	r3, [pc, #240]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4a3b      	ldr	r2, [pc, #236]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8087 	beq.w	8004712 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004604:	4b36      	ldr	r3, [pc, #216]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 030c 	and.w	r3, r3, #12
 800460c:	2b08      	cmp	r3, #8
 800460e:	d061      	beq.n	80046d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d146      	bne.n	80046a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004618:	4b33      	ldr	r3, [pc, #204]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461e:	f7fd f8ed 	bl	80017fc <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004626:	f7fd f8e9 	bl	80017fc <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e06d      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004638:	4b29      	ldr	r3, [pc, #164]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f0      	bne.n	8004626 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800464c:	d108      	bne.n	8004660 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800464e:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	4921      	ldr	r1, [pc, #132]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004660:	4b1f      	ldr	r3, [pc, #124]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a19      	ldr	r1, [r3, #32]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	430b      	orrs	r3, r1
 8004672:	491b      	ldr	r1, [pc, #108]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	4313      	orrs	r3, r2
 8004676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004678:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467e:	f7fd f8bd 	bl	80017fc <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004686:	f7fd f8b9 	bl	80017fc <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e03d      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004698:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f0      	beq.n	8004686 <HAL_RCC_OscConfig+0x46a>
 80046a4:	e035      	b.n	8004712 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a6:	4b10      	ldr	r3, [pc, #64]	@ (80046e8 <HAL_RCC_OscConfig+0x4cc>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ac:	f7fd f8a6 	bl	80017fc <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b4:	f7fd f8a2 	bl	80017fc <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e026      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c6:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f0      	bne.n	80046b4 <HAL_RCC_OscConfig+0x498>
 80046d2:	e01e      	b.n	8004712 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d107      	bne.n	80046ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e019      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40007000 	.word	0x40007000
 80046e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046ec:	4b0b      	ldr	r3, [pc, #44]	@ (800471c <HAL_RCC_OscConfig+0x500>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d106      	bne.n	800470e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d001      	beq.n	8004712 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40021000 	.word	0x40021000

08004720 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0d0      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b6a      	ldr	r3, [pc, #424]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d910      	bls.n	8004764 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b67      	ldr	r3, [pc, #412]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 0207 	bic.w	r2, r3, #7
 800474a:	4965      	ldr	r1, [pc, #404]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	4313      	orrs	r3, r2
 8004750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004752:	4b63      	ldr	r3, [pc, #396]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d001      	beq.n	8004764 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0b8      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800477c:	4b59      	ldr	r3, [pc, #356]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a58      	ldr	r2, [pc, #352]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004782:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004786:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004794:	4b53      	ldr	r3, [pc, #332]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4a52      	ldr	r2, [pc, #328]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800479e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a0:	4b50      	ldr	r3, [pc, #320]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	494d      	ldr	r1, [pc, #308]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d040      	beq.n	8004840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	4b47      	ldr	r3, [pc, #284]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d115      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e07f      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b41      	ldr	r3, [pc, #260]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e073      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b3d      	ldr	r3, [pc, #244]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e06b      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b39      	ldr	r3, [pc, #228]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4936      	ldr	r1, [pc, #216]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004810:	f7fc fff4 	bl	80017fc <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fc fff0 	bl	80017fc <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e053      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b2d      	ldr	r3, [pc, #180]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b27      	ldr	r3, [pc, #156]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d210      	bcs.n	8004870 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f023 0207 	bic.w	r2, r3, #7
 8004856:	4922      	ldr	r1, [pc, #136]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	4313      	orrs	r3, r2
 800485c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d001      	beq.n	8004870 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e032      	b.n	80048d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800487c:	4b19      	ldr	r3, [pc, #100]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4916      	ldr	r1, [pc, #88]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	4313      	orrs	r3, r2
 800488c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800489a:	4b12      	ldr	r3, [pc, #72]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	490e      	ldr	r1, [pc, #56]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ae:	f000 f821 	bl	80048f4 <HAL_RCC_GetSysClockFreq>
 80048b2:	4602      	mov	r2, r0
 80048b4:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	091b      	lsrs	r3, r3, #4
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	490a      	ldr	r1, [pc, #40]	@ (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048c0:	5ccb      	ldrb	r3, [r1, r3]
 80048c2:	fa22 f303 	lsr.w	r3, r2, r3
 80048c6:	4a09      	ldr	r2, [pc, #36]	@ (80048ec <HAL_RCC_ClockConfig+0x1cc>)
 80048c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048ca:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <HAL_RCC_ClockConfig+0x1d0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fc ff52 	bl	8001778 <HAL_InitTick>

  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40022000 	.word	0x40022000
 80048e4:	40021000 	.word	0x40021000
 80048e8:	08005bd8 	.word	0x08005bd8
 80048ec:	20000010 	.word	0x20000010
 80048f0:	20000028 	.word	0x20000028

080048f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	2300      	movs	r3, #0
 8004908:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800490e:	4b1e      	ldr	r3, [pc, #120]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x94>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b04      	cmp	r3, #4
 800491c:	d002      	beq.n	8004924 <HAL_RCC_GetSysClockFreq+0x30>
 800491e:	2b08      	cmp	r3, #8
 8004920:	d003      	beq.n	800492a <HAL_RCC_GetSysClockFreq+0x36>
 8004922:	e027      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004924:	4b19      	ldr	r3, [pc, #100]	@ (800498c <HAL_RCC_GetSysClockFreq+0x98>)
 8004926:	613b      	str	r3, [r7, #16]
      break;
 8004928:	e027      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	0c9b      	lsrs	r3, r3, #18
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	4a17      	ldr	r2, [pc, #92]	@ (8004990 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004934:	5cd3      	ldrb	r3, [r2, r3]
 8004936:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d010      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004942:	4b11      	ldr	r3, [pc, #68]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x94>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	0c5b      	lsrs	r3, r3, #17
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	4a11      	ldr	r2, [pc, #68]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xa0>)
 800494e:	5cd3      	ldrb	r3, [r2, r3]
 8004950:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a0d      	ldr	r2, [pc, #52]	@ (800498c <HAL_RCC_GetSysClockFreq+0x98>)
 8004956:	fb03 f202 	mul.w	r2, r3, r2
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e004      	b.n	800496e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a0c      	ldr	r2, [pc, #48]	@ (8004998 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	613b      	str	r3, [r7, #16]
      break;
 8004972:	e002      	b.n	800497a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004974:	4b05      	ldr	r3, [pc, #20]	@ (800498c <HAL_RCC_GetSysClockFreq+0x98>)
 8004976:	613b      	str	r3, [r7, #16]
      break;
 8004978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800497a:	693b      	ldr	r3, [r7, #16]
}
 800497c:	4618      	mov	r0, r3
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000
 800498c:	007a1200 	.word	0x007a1200
 8004990:	08005bf0 	.word	0x08005bf0
 8004994:	08005c00 	.word	0x08005c00
 8004998:	003d0900 	.word	0x003d0900

0800499c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a0:	4b02      	ldr	r3, [pc, #8]	@ (80049ac <HAL_RCC_GetHCLKFreq+0x10>)
 80049a2:	681b      	ldr	r3, [r3, #0]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	20000010 	.word	0x20000010

080049b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049b4:	f7ff fff2 	bl	800499c <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b05      	ldr	r3, [pc, #20]	@ (80049d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	0a1b      	lsrs	r3, r3, #8
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4903      	ldr	r1, [pc, #12]	@ (80049d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40021000 	.word	0x40021000
 80049d4:	08005be8 	.word	0x08005be8

080049d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049e0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a0c <RCC_Delay+0x34>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004a10 <RCC_Delay+0x38>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	0a5b      	lsrs	r3, r3, #9
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049f4:	bf00      	nop
  }
  while (Delay --);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1e5a      	subs	r2, r3, #1
 80049fa:	60fa      	str	r2, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f9      	bne.n	80049f4 <RCC_Delay+0x1c>
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	20000010 	.word	0x20000010
 8004a10:	10624dd3 	.word	0x10624dd3

08004a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e041      	b.n	8004aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fc fd6a 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f000 fa5c 	bl	8004f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d001      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e03a      	b.n	8004b42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	@ (8004b4c <HAL_TIM_Base_Start_IT+0x98>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x58>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af6:	d009      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x58>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a14      	ldr	r2, [pc, #80]	@ (8004b50 <HAL_TIM_Base_Start_IT+0x9c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x58>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a13      	ldr	r2, [pc, #76]	@ (8004b54 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d111      	bne.n	8004b30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d010      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	e007      	b.n	8004b40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800

08004b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01b      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0202 	mvn.w	r2, #2
 8004b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f998 	bl	8004ed8 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f98b 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f99a 	bl	8004eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0204 	mvn.w	r2, #4
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f972 	bl	8004ed8 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f965 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 f974 	bl	8004eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0208 	mvn.w	r2, #8
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2204      	movs	r2, #4
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f94c 	bl	8004ed8 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f93f 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f94e 	bl	8004eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01b      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0210 	mvn.w	r2, #16
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2208      	movs	r2, #8
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f926 	bl	8004ed8 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f919 	bl	8004ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f928 	bl	8004eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0201 	mvn.w	r2, #1
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fc fa2a 	bl	8001118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fa7f 	bl	80051e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f8f8 	bl	8004efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00c      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0220 	mvn.w	r2, #32
 8004d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa52 	bl	80051d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_ConfigClockSource+0x1c>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e0b4      	b.n	8004ebe <HAL_TIM_ConfigClockSource+0x186>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d8c:	d03e      	beq.n	8004e0c <HAL_TIM_ConfigClockSource+0xd4>
 8004d8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d92:	f200 8087 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9a:	f000 8086 	beq.w	8004eaa <HAL_TIM_ConfigClockSource+0x172>
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da2:	d87f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004da4:	2b70      	cmp	r3, #112	@ 0x70
 8004da6:	d01a      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0xa6>
 8004da8:	2b70      	cmp	r3, #112	@ 0x70
 8004daa:	d87b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dac:	2b60      	cmp	r3, #96	@ 0x60
 8004dae:	d050      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x11a>
 8004db0:	2b60      	cmp	r3, #96	@ 0x60
 8004db2:	d877      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004db4:	2b50      	cmp	r3, #80	@ 0x50
 8004db6:	d03c      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0xfa>
 8004db8:	2b50      	cmp	r3, #80	@ 0x50
 8004dba:	d873      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dbc:	2b40      	cmp	r3, #64	@ 0x40
 8004dbe:	d058      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x13a>
 8004dc0:	2b40      	cmp	r3, #64	@ 0x40
 8004dc2:	d86f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc4:	2b30      	cmp	r3, #48	@ 0x30
 8004dc6:	d064      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15a>
 8004dc8:	2b30      	cmp	r3, #48	@ 0x30
 8004dca:	d86b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d060      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15a>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d867      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15a>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d05a      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x15a>
 8004ddc:	e062      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dee:	f000 f974 	bl	80050da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	609a      	str	r2, [r3, #8]
      break;
 8004e0a:	e04f      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e1c:	f000 f95d 	bl	80050da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e2e:	609a      	str	r2, [r3, #8]
      break;
 8004e30:	e03c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f000 f8d4 	bl	8004fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2150      	movs	r1, #80	@ 0x50
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f92b 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004e50:	e02c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f000 f8f2 	bl	8005048 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2160      	movs	r1, #96	@ 0x60
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f91b 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004e70:	e01c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 f8b4 	bl	8004fec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2140      	movs	r1, #64	@ 0x40
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f90b 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004e90:	e00c      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f000 f902 	bl	80050a6 <TIM_ITRx_SetConfig>
      break;
 8004ea2:	e003      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea8:	e000      	b.n	8004eac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr

08004eea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr
	...

08004f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a2f      	ldr	r2, [pc, #188]	@ (8004fe0 <TIM_Base_SetConfig+0xd0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00b      	beq.n	8004f40 <TIM_Base_SetConfig+0x30>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2e:	d007      	beq.n	8004f40 <TIM_Base_SetConfig+0x30>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a2c      	ldr	r2, [pc, #176]	@ (8004fe4 <TIM_Base_SetConfig+0xd4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x30>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004fe8 <TIM_Base_SetConfig+0xd8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a22      	ldr	r2, [pc, #136]	@ (8004fe0 <TIM_Base_SetConfig+0xd0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00b      	beq.n	8004f72 <TIM_Base_SetConfig+0x62>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f60:	d007      	beq.n	8004f72 <TIM_Base_SetConfig+0x62>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe4 <TIM_Base_SetConfig+0xd4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_Base_SetConfig+0x62>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe8 <TIM_Base_SetConfig+0xd8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d108      	bne.n	8004f84 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a0d      	ldr	r2, [pc, #52]	@ (8004fe0 <TIM_Base_SetConfig+0xd0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d103      	bne.n	8004fb8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f023 0201 	bic.w	r2, r3, #1
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	611a      	str	r2, [r3, #16]
  }
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800

08004fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 030a 	bic.w	r3, r3, #10
 8005028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	bc80      	pop	{r7}
 8005046:	4770      	bx	lr

08005048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	f023 0210 	bic.w	r2, r3, #16
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	031b      	lsls	r3, r3, #12
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005084:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f043 0307 	orr.w	r3, r3, #7
 80050c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	609a      	str	r2, [r3, #8]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050da:	b480      	push	{r7}
 80050dc:	b087      	sub	sp, #28
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	021a      	lsls	r2, r3, #8
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	431a      	orrs	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	4313      	orrs	r3, r2
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	609a      	str	r2, [r3, #8]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e046      	b.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a16      	ldr	r2, [pc, #88]	@ (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00e      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517c:	d009      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a12      	ldr	r2, [pc, #72]	@ (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d004      	beq.n	8005192 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a10      	ldr	r2, [pc, #64]	@ (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10c      	bne.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bc80      	pop	{r7}
 80051c6:	4770      	bx	lr
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40000400 	.word	0x40000400
 80051d0:	40000800 	.word	0x40000800

080051d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr

080051e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bc80      	pop	{r7}
 80051f6:	4770      	bx	lr

080051f8 <malloc>:
 80051f8:	4b02      	ldr	r3, [pc, #8]	@ (8005204 <malloc+0xc>)
 80051fa:	4601      	mov	r1, r0
 80051fc:	6818      	ldr	r0, [r3, #0]
 80051fe:	f000 b82d 	b.w	800525c <_malloc_r>
 8005202:	bf00      	nop
 8005204:	20000030 	.word	0x20000030

08005208 <free>:
 8005208:	4b02      	ldr	r3, [pc, #8]	@ (8005214 <free+0xc>)
 800520a:	4601      	mov	r1, r0
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	f000 b915 	b.w	800543c <_free_r>
 8005212:	bf00      	nop
 8005214:	20000030 	.word	0x20000030

08005218 <sbrk_aligned>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4e0f      	ldr	r6, [pc, #60]	@ (8005258 <sbrk_aligned+0x40>)
 800521c:	460c      	mov	r4, r1
 800521e:	6831      	ldr	r1, [r6, #0]
 8005220:	4605      	mov	r5, r0
 8005222:	b911      	cbnz	r1, 800522a <sbrk_aligned+0x12>
 8005224:	f000 f8ce 	bl	80053c4 <_sbrk_r>
 8005228:	6030      	str	r0, [r6, #0]
 800522a:	4621      	mov	r1, r4
 800522c:	4628      	mov	r0, r5
 800522e:	f000 f8c9 	bl	80053c4 <_sbrk_r>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d103      	bne.n	800523e <sbrk_aligned+0x26>
 8005236:	f04f 34ff 	mov.w	r4, #4294967295
 800523a:	4620      	mov	r0, r4
 800523c:	bd70      	pop	{r4, r5, r6, pc}
 800523e:	1cc4      	adds	r4, r0, #3
 8005240:	f024 0403 	bic.w	r4, r4, #3
 8005244:	42a0      	cmp	r0, r4
 8005246:	d0f8      	beq.n	800523a <sbrk_aligned+0x22>
 8005248:	1a21      	subs	r1, r4, r0
 800524a:	4628      	mov	r0, r5
 800524c:	f000 f8ba 	bl	80053c4 <_sbrk_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d1f2      	bne.n	800523a <sbrk_aligned+0x22>
 8005254:	e7ef      	b.n	8005236 <sbrk_aligned+0x1e>
 8005256:	bf00      	nop
 8005258:	200001c4 	.word	0x200001c4

0800525c <_malloc_r>:
 800525c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005260:	1ccd      	adds	r5, r1, #3
 8005262:	f025 0503 	bic.w	r5, r5, #3
 8005266:	3508      	adds	r5, #8
 8005268:	2d0c      	cmp	r5, #12
 800526a:	bf38      	it	cc
 800526c:	250c      	movcc	r5, #12
 800526e:	2d00      	cmp	r5, #0
 8005270:	4606      	mov	r6, r0
 8005272:	db01      	blt.n	8005278 <_malloc_r+0x1c>
 8005274:	42a9      	cmp	r1, r5
 8005276:	d904      	bls.n	8005282 <_malloc_r+0x26>
 8005278:	230c      	movs	r3, #12
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	2000      	movs	r0, #0
 800527e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005358 <_malloc_r+0xfc>
 8005286:	f000 f869 	bl	800535c <__malloc_lock>
 800528a:	f8d8 3000 	ldr.w	r3, [r8]
 800528e:	461c      	mov	r4, r3
 8005290:	bb44      	cbnz	r4, 80052e4 <_malloc_r+0x88>
 8005292:	4629      	mov	r1, r5
 8005294:	4630      	mov	r0, r6
 8005296:	f7ff ffbf 	bl	8005218 <sbrk_aligned>
 800529a:	1c43      	adds	r3, r0, #1
 800529c:	4604      	mov	r4, r0
 800529e:	d158      	bne.n	8005352 <_malloc_r+0xf6>
 80052a0:	f8d8 4000 	ldr.w	r4, [r8]
 80052a4:	4627      	mov	r7, r4
 80052a6:	2f00      	cmp	r7, #0
 80052a8:	d143      	bne.n	8005332 <_malloc_r+0xd6>
 80052aa:	2c00      	cmp	r4, #0
 80052ac:	d04b      	beq.n	8005346 <_malloc_r+0xea>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	4639      	mov	r1, r7
 80052b2:	4630      	mov	r0, r6
 80052b4:	eb04 0903 	add.w	r9, r4, r3
 80052b8:	f000 f884 	bl	80053c4 <_sbrk_r>
 80052bc:	4581      	cmp	r9, r0
 80052be:	d142      	bne.n	8005346 <_malloc_r+0xea>
 80052c0:	6821      	ldr	r1, [r4, #0]
 80052c2:	4630      	mov	r0, r6
 80052c4:	1a6d      	subs	r5, r5, r1
 80052c6:	4629      	mov	r1, r5
 80052c8:	f7ff ffa6 	bl	8005218 <sbrk_aligned>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d03a      	beq.n	8005346 <_malloc_r+0xea>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	442b      	add	r3, r5
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	f8d8 3000 	ldr.w	r3, [r8]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	bb62      	cbnz	r2, 8005338 <_malloc_r+0xdc>
 80052de:	f8c8 7000 	str.w	r7, [r8]
 80052e2:	e00f      	b.n	8005304 <_malloc_r+0xa8>
 80052e4:	6822      	ldr	r2, [r4, #0]
 80052e6:	1b52      	subs	r2, r2, r5
 80052e8:	d420      	bmi.n	800532c <_malloc_r+0xd0>
 80052ea:	2a0b      	cmp	r2, #11
 80052ec:	d917      	bls.n	800531e <_malloc_r+0xc2>
 80052ee:	1961      	adds	r1, r4, r5
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	6025      	str	r5, [r4, #0]
 80052f4:	bf18      	it	ne
 80052f6:	6059      	strne	r1, [r3, #4]
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	bf08      	it	eq
 80052fc:	f8c8 1000 	streq.w	r1, [r8]
 8005300:	5162      	str	r2, [r4, r5]
 8005302:	604b      	str	r3, [r1, #4]
 8005304:	4630      	mov	r0, r6
 8005306:	f000 f82f 	bl	8005368 <__malloc_unlock>
 800530a:	f104 000b 	add.w	r0, r4, #11
 800530e:	1d23      	adds	r3, r4, #4
 8005310:	f020 0007 	bic.w	r0, r0, #7
 8005314:	1ac2      	subs	r2, r0, r3
 8005316:	bf1c      	itt	ne
 8005318:	1a1b      	subne	r3, r3, r0
 800531a:	50a3      	strne	r3, [r4, r2]
 800531c:	e7af      	b.n	800527e <_malloc_r+0x22>
 800531e:	6862      	ldr	r2, [r4, #4]
 8005320:	42a3      	cmp	r3, r4
 8005322:	bf0c      	ite	eq
 8005324:	f8c8 2000 	streq.w	r2, [r8]
 8005328:	605a      	strne	r2, [r3, #4]
 800532a:	e7eb      	b.n	8005304 <_malloc_r+0xa8>
 800532c:	4623      	mov	r3, r4
 800532e:	6864      	ldr	r4, [r4, #4]
 8005330:	e7ae      	b.n	8005290 <_malloc_r+0x34>
 8005332:	463c      	mov	r4, r7
 8005334:	687f      	ldr	r7, [r7, #4]
 8005336:	e7b6      	b.n	80052a6 <_malloc_r+0x4a>
 8005338:	461a      	mov	r2, r3
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	42a3      	cmp	r3, r4
 800533e:	d1fb      	bne.n	8005338 <_malloc_r+0xdc>
 8005340:	2300      	movs	r3, #0
 8005342:	6053      	str	r3, [r2, #4]
 8005344:	e7de      	b.n	8005304 <_malloc_r+0xa8>
 8005346:	230c      	movs	r3, #12
 8005348:	4630      	mov	r0, r6
 800534a:	6033      	str	r3, [r6, #0]
 800534c:	f000 f80c 	bl	8005368 <__malloc_unlock>
 8005350:	e794      	b.n	800527c <_malloc_r+0x20>
 8005352:	6005      	str	r5, [r0, #0]
 8005354:	e7d6      	b.n	8005304 <_malloc_r+0xa8>
 8005356:	bf00      	nop
 8005358:	200001c8 	.word	0x200001c8

0800535c <__malloc_lock>:
 800535c:	4801      	ldr	r0, [pc, #4]	@ (8005364 <__malloc_lock+0x8>)
 800535e:	f000 b86b 	b.w	8005438 <__retarget_lock_acquire_recursive>
 8005362:	bf00      	nop
 8005364:	20000308 	.word	0x20000308

08005368 <__malloc_unlock>:
 8005368:	4801      	ldr	r0, [pc, #4]	@ (8005370 <__malloc_unlock+0x8>)
 800536a:	f000 b866 	b.w	800543a <__retarget_lock_release_recursive>
 800536e:	bf00      	nop
 8005370:	20000308 	.word	0x20000308

08005374 <siprintf>:
 8005374:	b40e      	push	{r1, r2, r3}
 8005376:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800537a:	b500      	push	{lr}
 800537c:	b09c      	sub	sp, #112	@ 0x70
 800537e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005380:	9002      	str	r0, [sp, #8]
 8005382:	9006      	str	r0, [sp, #24]
 8005384:	9107      	str	r1, [sp, #28]
 8005386:	9104      	str	r1, [sp, #16]
 8005388:	4808      	ldr	r0, [pc, #32]	@ (80053ac <siprintf+0x38>)
 800538a:	4909      	ldr	r1, [pc, #36]	@ (80053b0 <siprintf+0x3c>)
 800538c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005390:	9105      	str	r1, [sp, #20]
 8005392:	6800      	ldr	r0, [r0, #0]
 8005394:	a902      	add	r1, sp, #8
 8005396:	9301      	str	r3, [sp, #4]
 8005398:	f000 f8f4 	bl	8005584 <_svfiprintf_r>
 800539c:	2200      	movs	r2, #0
 800539e:	9b02      	ldr	r3, [sp, #8]
 80053a0:	701a      	strb	r2, [r3, #0]
 80053a2:	b01c      	add	sp, #112	@ 0x70
 80053a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80053a8:	b003      	add	sp, #12
 80053aa:	4770      	bx	lr
 80053ac:	20000030 	.word	0x20000030
 80053b0:	ffff0208 	.word	0xffff0208

080053b4 <memset>:
 80053b4:	4603      	mov	r3, r0
 80053b6:	4402      	add	r2, r0
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d100      	bne.n	80053be <memset+0xa>
 80053bc:	4770      	bx	lr
 80053be:	f803 1b01 	strb.w	r1, [r3], #1
 80053c2:	e7f9      	b.n	80053b8 <memset+0x4>

080053c4 <_sbrk_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	2300      	movs	r3, #0
 80053c8:	4d05      	ldr	r5, [pc, #20]	@ (80053e0 <_sbrk_r+0x1c>)
 80053ca:	4604      	mov	r4, r0
 80053cc:	4608      	mov	r0, r1
 80053ce:	602b      	str	r3, [r5, #0]
 80053d0:	f7fc f90e 	bl	80015f0 <_sbrk>
 80053d4:	1c43      	adds	r3, r0, #1
 80053d6:	d102      	bne.n	80053de <_sbrk_r+0x1a>
 80053d8:	682b      	ldr	r3, [r5, #0]
 80053da:	b103      	cbz	r3, 80053de <_sbrk_r+0x1a>
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	bd38      	pop	{r3, r4, r5, pc}
 80053e0:	20000304 	.word	0x20000304

080053e4 <__errno>:
 80053e4:	4b01      	ldr	r3, [pc, #4]	@ (80053ec <__errno+0x8>)
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000030 	.word	0x20000030

080053f0 <__libc_init_array>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	2600      	movs	r6, #0
 80053f4:	4d0c      	ldr	r5, [pc, #48]	@ (8005428 <__libc_init_array+0x38>)
 80053f6:	4c0d      	ldr	r4, [pc, #52]	@ (800542c <__libc_init_array+0x3c>)
 80053f8:	1b64      	subs	r4, r4, r5
 80053fa:	10a4      	asrs	r4, r4, #2
 80053fc:	42a6      	cmp	r6, r4
 80053fe:	d109      	bne.n	8005414 <__libc_init_array+0x24>
 8005400:	f000 fbba 	bl	8005b78 <_init>
 8005404:	2600      	movs	r6, #0
 8005406:	4d0a      	ldr	r5, [pc, #40]	@ (8005430 <__libc_init_array+0x40>)
 8005408:	4c0a      	ldr	r4, [pc, #40]	@ (8005434 <__libc_init_array+0x44>)
 800540a:	1b64      	subs	r4, r4, r5
 800540c:	10a4      	asrs	r4, r4, #2
 800540e:	42a6      	cmp	r6, r4
 8005410:	d105      	bne.n	800541e <__libc_init_array+0x2e>
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	f855 3b04 	ldr.w	r3, [r5], #4
 8005418:	4798      	blx	r3
 800541a:	3601      	adds	r6, #1
 800541c:	e7ee      	b.n	80053fc <__libc_init_array+0xc>
 800541e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005422:	4798      	blx	r3
 8005424:	3601      	adds	r6, #1
 8005426:	e7f2      	b.n	800540e <__libc_init_array+0x1e>
 8005428:	08005c38 	.word	0x08005c38
 800542c:	08005c38 	.word	0x08005c38
 8005430:	08005c38 	.word	0x08005c38
 8005434:	08005c3c 	.word	0x08005c3c

08005438 <__retarget_lock_acquire_recursive>:
 8005438:	4770      	bx	lr

0800543a <__retarget_lock_release_recursive>:
 800543a:	4770      	bx	lr

0800543c <_free_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4605      	mov	r5, r0
 8005440:	2900      	cmp	r1, #0
 8005442:	d040      	beq.n	80054c6 <_free_r+0x8a>
 8005444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005448:	1f0c      	subs	r4, r1, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	bfb8      	it	lt
 800544e:	18e4      	addlt	r4, r4, r3
 8005450:	f7ff ff84 	bl	800535c <__malloc_lock>
 8005454:	4a1c      	ldr	r2, [pc, #112]	@ (80054c8 <_free_r+0x8c>)
 8005456:	6813      	ldr	r3, [r2, #0]
 8005458:	b933      	cbnz	r3, 8005468 <_free_r+0x2c>
 800545a:	6063      	str	r3, [r4, #4]
 800545c:	6014      	str	r4, [r2, #0]
 800545e:	4628      	mov	r0, r5
 8005460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005464:	f7ff bf80 	b.w	8005368 <__malloc_unlock>
 8005468:	42a3      	cmp	r3, r4
 800546a:	d908      	bls.n	800547e <_free_r+0x42>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	1821      	adds	r1, r4, r0
 8005470:	428b      	cmp	r3, r1
 8005472:	bf01      	itttt	eq
 8005474:	6819      	ldreq	r1, [r3, #0]
 8005476:	685b      	ldreq	r3, [r3, #4]
 8005478:	1809      	addeq	r1, r1, r0
 800547a:	6021      	streq	r1, [r4, #0]
 800547c:	e7ed      	b.n	800545a <_free_r+0x1e>
 800547e:	461a      	mov	r2, r3
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	b10b      	cbz	r3, 8005488 <_free_r+0x4c>
 8005484:	42a3      	cmp	r3, r4
 8005486:	d9fa      	bls.n	800547e <_free_r+0x42>
 8005488:	6811      	ldr	r1, [r2, #0]
 800548a:	1850      	adds	r0, r2, r1
 800548c:	42a0      	cmp	r0, r4
 800548e:	d10b      	bne.n	80054a8 <_free_r+0x6c>
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	4401      	add	r1, r0
 8005494:	1850      	adds	r0, r2, r1
 8005496:	4283      	cmp	r3, r0
 8005498:	6011      	str	r1, [r2, #0]
 800549a:	d1e0      	bne.n	800545e <_free_r+0x22>
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	4408      	add	r0, r1
 80054a2:	6010      	str	r0, [r2, #0]
 80054a4:	6053      	str	r3, [r2, #4]
 80054a6:	e7da      	b.n	800545e <_free_r+0x22>
 80054a8:	d902      	bls.n	80054b0 <_free_r+0x74>
 80054aa:	230c      	movs	r3, #12
 80054ac:	602b      	str	r3, [r5, #0]
 80054ae:	e7d6      	b.n	800545e <_free_r+0x22>
 80054b0:	6820      	ldr	r0, [r4, #0]
 80054b2:	1821      	adds	r1, r4, r0
 80054b4:	428b      	cmp	r3, r1
 80054b6:	bf01      	itttt	eq
 80054b8:	6819      	ldreq	r1, [r3, #0]
 80054ba:	685b      	ldreq	r3, [r3, #4]
 80054bc:	1809      	addeq	r1, r1, r0
 80054be:	6021      	streq	r1, [r4, #0]
 80054c0:	6063      	str	r3, [r4, #4]
 80054c2:	6054      	str	r4, [r2, #4]
 80054c4:	e7cb      	b.n	800545e <_free_r+0x22>
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	200001c8 	.word	0x200001c8

080054cc <__ssputs_r>:
 80054cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d0:	461f      	mov	r7, r3
 80054d2:	688e      	ldr	r6, [r1, #8]
 80054d4:	4682      	mov	sl, r0
 80054d6:	42be      	cmp	r6, r7
 80054d8:	460c      	mov	r4, r1
 80054da:	4690      	mov	r8, r2
 80054dc:	680b      	ldr	r3, [r1, #0]
 80054de:	d82d      	bhi.n	800553c <__ssputs_r+0x70>
 80054e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80054e8:	d026      	beq.n	8005538 <__ssputs_r+0x6c>
 80054ea:	6965      	ldr	r5, [r4, #20]
 80054ec:	6909      	ldr	r1, [r1, #16]
 80054ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054f2:	eba3 0901 	sub.w	r9, r3, r1
 80054f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054fa:	1c7b      	adds	r3, r7, #1
 80054fc:	444b      	add	r3, r9
 80054fe:	106d      	asrs	r5, r5, #1
 8005500:	429d      	cmp	r5, r3
 8005502:	bf38      	it	cc
 8005504:	461d      	movcc	r5, r3
 8005506:	0553      	lsls	r3, r2, #21
 8005508:	d527      	bpl.n	800555a <__ssputs_r+0x8e>
 800550a:	4629      	mov	r1, r5
 800550c:	f7ff fea6 	bl	800525c <_malloc_r>
 8005510:	4606      	mov	r6, r0
 8005512:	b360      	cbz	r0, 800556e <__ssputs_r+0xa2>
 8005514:	464a      	mov	r2, r9
 8005516:	6921      	ldr	r1, [r4, #16]
 8005518:	f000 faea 	bl	8005af0 <memcpy>
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005526:	81a3      	strh	r3, [r4, #12]
 8005528:	6126      	str	r6, [r4, #16]
 800552a:	444e      	add	r6, r9
 800552c:	6026      	str	r6, [r4, #0]
 800552e:	463e      	mov	r6, r7
 8005530:	6165      	str	r5, [r4, #20]
 8005532:	eba5 0509 	sub.w	r5, r5, r9
 8005536:	60a5      	str	r5, [r4, #8]
 8005538:	42be      	cmp	r6, r7
 800553a:	d900      	bls.n	800553e <__ssputs_r+0x72>
 800553c:	463e      	mov	r6, r7
 800553e:	4632      	mov	r2, r6
 8005540:	4641      	mov	r1, r8
 8005542:	6820      	ldr	r0, [r4, #0]
 8005544:	f000 faac 	bl	8005aa0 <memmove>
 8005548:	2000      	movs	r0, #0
 800554a:	68a3      	ldr	r3, [r4, #8]
 800554c:	1b9b      	subs	r3, r3, r6
 800554e:	60a3      	str	r3, [r4, #8]
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	4433      	add	r3, r6
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555a:	462a      	mov	r2, r5
 800555c:	f000 fad6 	bl	8005b0c <_realloc_r>
 8005560:	4606      	mov	r6, r0
 8005562:	2800      	cmp	r0, #0
 8005564:	d1e0      	bne.n	8005528 <__ssputs_r+0x5c>
 8005566:	4650      	mov	r0, sl
 8005568:	6921      	ldr	r1, [r4, #16]
 800556a:	f7ff ff67 	bl	800543c <_free_r>
 800556e:	230c      	movs	r3, #12
 8005570:	f8ca 3000 	str.w	r3, [sl]
 8005574:	89a3      	ldrh	r3, [r4, #12]
 8005576:	f04f 30ff 	mov.w	r0, #4294967295
 800557a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800557e:	81a3      	strh	r3, [r4, #12]
 8005580:	e7e9      	b.n	8005556 <__ssputs_r+0x8a>
	...

08005584 <_svfiprintf_r>:
 8005584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	4698      	mov	r8, r3
 800558a:	898b      	ldrh	r3, [r1, #12]
 800558c:	4607      	mov	r7, r0
 800558e:	061b      	lsls	r3, r3, #24
 8005590:	460d      	mov	r5, r1
 8005592:	4614      	mov	r4, r2
 8005594:	b09d      	sub	sp, #116	@ 0x74
 8005596:	d510      	bpl.n	80055ba <_svfiprintf_r+0x36>
 8005598:	690b      	ldr	r3, [r1, #16]
 800559a:	b973      	cbnz	r3, 80055ba <_svfiprintf_r+0x36>
 800559c:	2140      	movs	r1, #64	@ 0x40
 800559e:	f7ff fe5d 	bl	800525c <_malloc_r>
 80055a2:	6028      	str	r0, [r5, #0]
 80055a4:	6128      	str	r0, [r5, #16]
 80055a6:	b930      	cbnz	r0, 80055b6 <_svfiprintf_r+0x32>
 80055a8:	230c      	movs	r3, #12
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	f04f 30ff 	mov.w	r0, #4294967295
 80055b0:	b01d      	add	sp, #116	@ 0x74
 80055b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b6:	2340      	movs	r3, #64	@ 0x40
 80055b8:	616b      	str	r3, [r5, #20]
 80055ba:	2300      	movs	r3, #0
 80055bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80055be:	2320      	movs	r3, #32
 80055c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055c4:	2330      	movs	r3, #48	@ 0x30
 80055c6:	f04f 0901 	mov.w	r9, #1
 80055ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80055ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005768 <_svfiprintf_r+0x1e4>
 80055d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055d6:	4623      	mov	r3, r4
 80055d8:	469a      	mov	sl, r3
 80055da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055de:	b10a      	cbz	r2, 80055e4 <_svfiprintf_r+0x60>
 80055e0:	2a25      	cmp	r2, #37	@ 0x25
 80055e2:	d1f9      	bne.n	80055d8 <_svfiprintf_r+0x54>
 80055e4:	ebba 0b04 	subs.w	fp, sl, r4
 80055e8:	d00b      	beq.n	8005602 <_svfiprintf_r+0x7e>
 80055ea:	465b      	mov	r3, fp
 80055ec:	4622      	mov	r2, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	4638      	mov	r0, r7
 80055f2:	f7ff ff6b 	bl	80054cc <__ssputs_r>
 80055f6:	3001      	adds	r0, #1
 80055f8:	f000 80a7 	beq.w	800574a <_svfiprintf_r+0x1c6>
 80055fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055fe:	445a      	add	r2, fp
 8005600:	9209      	str	r2, [sp, #36]	@ 0x24
 8005602:	f89a 3000 	ldrb.w	r3, [sl]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 809f 	beq.w	800574a <_svfiprintf_r+0x1c6>
 800560c:	2300      	movs	r3, #0
 800560e:	f04f 32ff 	mov.w	r2, #4294967295
 8005612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005616:	f10a 0a01 	add.w	sl, sl, #1
 800561a:	9304      	str	r3, [sp, #16]
 800561c:	9307      	str	r3, [sp, #28]
 800561e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005622:	931a      	str	r3, [sp, #104]	@ 0x68
 8005624:	4654      	mov	r4, sl
 8005626:	2205      	movs	r2, #5
 8005628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800562c:	484e      	ldr	r0, [pc, #312]	@ (8005768 <_svfiprintf_r+0x1e4>)
 800562e:	f000 fa51 	bl	8005ad4 <memchr>
 8005632:	9a04      	ldr	r2, [sp, #16]
 8005634:	b9d8      	cbnz	r0, 800566e <_svfiprintf_r+0xea>
 8005636:	06d0      	lsls	r0, r2, #27
 8005638:	bf44      	itt	mi
 800563a:	2320      	movmi	r3, #32
 800563c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005640:	0711      	lsls	r1, r2, #28
 8005642:	bf44      	itt	mi
 8005644:	232b      	movmi	r3, #43	@ 0x2b
 8005646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800564a:	f89a 3000 	ldrb.w	r3, [sl]
 800564e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005650:	d015      	beq.n	800567e <_svfiprintf_r+0xfa>
 8005652:	4654      	mov	r4, sl
 8005654:	2000      	movs	r0, #0
 8005656:	f04f 0c0a 	mov.w	ip, #10
 800565a:	9a07      	ldr	r2, [sp, #28]
 800565c:	4621      	mov	r1, r4
 800565e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005662:	3b30      	subs	r3, #48	@ 0x30
 8005664:	2b09      	cmp	r3, #9
 8005666:	d94b      	bls.n	8005700 <_svfiprintf_r+0x17c>
 8005668:	b1b0      	cbz	r0, 8005698 <_svfiprintf_r+0x114>
 800566a:	9207      	str	r2, [sp, #28]
 800566c:	e014      	b.n	8005698 <_svfiprintf_r+0x114>
 800566e:	eba0 0308 	sub.w	r3, r0, r8
 8005672:	fa09 f303 	lsl.w	r3, r9, r3
 8005676:	4313      	orrs	r3, r2
 8005678:	46a2      	mov	sl, r4
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	e7d2      	b.n	8005624 <_svfiprintf_r+0xa0>
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	1d19      	adds	r1, r3, #4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	9103      	str	r1, [sp, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	bfbb      	ittet	lt
 800568a:	425b      	neglt	r3, r3
 800568c:	f042 0202 	orrlt.w	r2, r2, #2
 8005690:	9307      	strge	r3, [sp, #28]
 8005692:	9307      	strlt	r3, [sp, #28]
 8005694:	bfb8      	it	lt
 8005696:	9204      	strlt	r2, [sp, #16]
 8005698:	7823      	ldrb	r3, [r4, #0]
 800569a:	2b2e      	cmp	r3, #46	@ 0x2e
 800569c:	d10a      	bne.n	80056b4 <_svfiprintf_r+0x130>
 800569e:	7863      	ldrb	r3, [r4, #1]
 80056a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80056a2:	d132      	bne.n	800570a <_svfiprintf_r+0x186>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	3402      	adds	r4, #2
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	9203      	str	r2, [sp, #12]
 80056ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80056b2:	9305      	str	r3, [sp, #20]
 80056b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800576c <_svfiprintf_r+0x1e8>
 80056b8:	2203      	movs	r2, #3
 80056ba:	4650      	mov	r0, sl
 80056bc:	7821      	ldrb	r1, [r4, #0]
 80056be:	f000 fa09 	bl	8005ad4 <memchr>
 80056c2:	b138      	cbz	r0, 80056d4 <_svfiprintf_r+0x150>
 80056c4:	2240      	movs	r2, #64	@ 0x40
 80056c6:	9b04      	ldr	r3, [sp, #16]
 80056c8:	eba0 000a 	sub.w	r0, r0, sl
 80056cc:	4082      	lsls	r2, r0
 80056ce:	4313      	orrs	r3, r2
 80056d0:	3401      	adds	r4, #1
 80056d2:	9304      	str	r3, [sp, #16]
 80056d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d8:	2206      	movs	r2, #6
 80056da:	4825      	ldr	r0, [pc, #148]	@ (8005770 <_svfiprintf_r+0x1ec>)
 80056dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056e0:	f000 f9f8 	bl	8005ad4 <memchr>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d036      	beq.n	8005756 <_svfiprintf_r+0x1d2>
 80056e8:	4b22      	ldr	r3, [pc, #136]	@ (8005774 <_svfiprintf_r+0x1f0>)
 80056ea:	bb1b      	cbnz	r3, 8005734 <_svfiprintf_r+0x1b0>
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	3307      	adds	r3, #7
 80056f0:	f023 0307 	bic.w	r3, r3, #7
 80056f4:	3308      	adds	r3, #8
 80056f6:	9303      	str	r3, [sp, #12]
 80056f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056fa:	4433      	add	r3, r6
 80056fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80056fe:	e76a      	b.n	80055d6 <_svfiprintf_r+0x52>
 8005700:	460c      	mov	r4, r1
 8005702:	2001      	movs	r0, #1
 8005704:	fb0c 3202 	mla	r2, ip, r2, r3
 8005708:	e7a8      	b.n	800565c <_svfiprintf_r+0xd8>
 800570a:	2300      	movs	r3, #0
 800570c:	f04f 0c0a 	mov.w	ip, #10
 8005710:	4619      	mov	r1, r3
 8005712:	3401      	adds	r4, #1
 8005714:	9305      	str	r3, [sp, #20]
 8005716:	4620      	mov	r0, r4
 8005718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800571c:	3a30      	subs	r2, #48	@ 0x30
 800571e:	2a09      	cmp	r2, #9
 8005720:	d903      	bls.n	800572a <_svfiprintf_r+0x1a6>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0c6      	beq.n	80056b4 <_svfiprintf_r+0x130>
 8005726:	9105      	str	r1, [sp, #20]
 8005728:	e7c4      	b.n	80056b4 <_svfiprintf_r+0x130>
 800572a:	4604      	mov	r4, r0
 800572c:	2301      	movs	r3, #1
 800572e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005732:	e7f0      	b.n	8005716 <_svfiprintf_r+0x192>
 8005734:	ab03      	add	r3, sp, #12
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	462a      	mov	r2, r5
 800573a:	4638      	mov	r0, r7
 800573c:	4b0e      	ldr	r3, [pc, #56]	@ (8005778 <_svfiprintf_r+0x1f4>)
 800573e:	a904      	add	r1, sp, #16
 8005740:	f3af 8000 	nop.w
 8005744:	1c42      	adds	r2, r0, #1
 8005746:	4606      	mov	r6, r0
 8005748:	d1d6      	bne.n	80056f8 <_svfiprintf_r+0x174>
 800574a:	89ab      	ldrh	r3, [r5, #12]
 800574c:	065b      	lsls	r3, r3, #25
 800574e:	f53f af2d 	bmi.w	80055ac <_svfiprintf_r+0x28>
 8005752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005754:	e72c      	b.n	80055b0 <_svfiprintf_r+0x2c>
 8005756:	ab03      	add	r3, sp, #12
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	462a      	mov	r2, r5
 800575c:	4638      	mov	r0, r7
 800575e:	4b06      	ldr	r3, [pc, #24]	@ (8005778 <_svfiprintf_r+0x1f4>)
 8005760:	a904      	add	r1, sp, #16
 8005762:	f000 f87d 	bl	8005860 <_printf_i>
 8005766:	e7ed      	b.n	8005744 <_svfiprintf_r+0x1c0>
 8005768:	08005c02 	.word	0x08005c02
 800576c:	08005c08 	.word	0x08005c08
 8005770:	08005c0c 	.word	0x08005c0c
 8005774:	00000000 	.word	0x00000000
 8005778:	080054cd 	.word	0x080054cd

0800577c <_printf_common>:
 800577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	4616      	mov	r6, r2
 8005782:	4698      	mov	r8, r3
 8005784:	688a      	ldr	r2, [r1, #8]
 8005786:	690b      	ldr	r3, [r1, #16]
 8005788:	4607      	mov	r7, r0
 800578a:	4293      	cmp	r3, r2
 800578c:	bfb8      	it	lt
 800578e:	4613      	movlt	r3, r2
 8005790:	6033      	str	r3, [r6, #0]
 8005792:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005796:	460c      	mov	r4, r1
 8005798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800579c:	b10a      	cbz	r2, 80057a2 <_printf_common+0x26>
 800579e:	3301      	adds	r3, #1
 80057a0:	6033      	str	r3, [r6, #0]
 80057a2:	6823      	ldr	r3, [r4, #0]
 80057a4:	0699      	lsls	r1, r3, #26
 80057a6:	bf42      	ittt	mi
 80057a8:	6833      	ldrmi	r3, [r6, #0]
 80057aa:	3302      	addmi	r3, #2
 80057ac:	6033      	strmi	r3, [r6, #0]
 80057ae:	6825      	ldr	r5, [r4, #0]
 80057b0:	f015 0506 	ands.w	r5, r5, #6
 80057b4:	d106      	bne.n	80057c4 <_printf_common+0x48>
 80057b6:	f104 0a19 	add.w	sl, r4, #25
 80057ba:	68e3      	ldr	r3, [r4, #12]
 80057bc:	6832      	ldr	r2, [r6, #0]
 80057be:	1a9b      	subs	r3, r3, r2
 80057c0:	42ab      	cmp	r3, r5
 80057c2:	dc2b      	bgt.n	800581c <_printf_common+0xa0>
 80057c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057c8:	6822      	ldr	r2, [r4, #0]
 80057ca:	3b00      	subs	r3, #0
 80057cc:	bf18      	it	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	0692      	lsls	r2, r2, #26
 80057d2:	d430      	bmi.n	8005836 <_printf_common+0xba>
 80057d4:	4641      	mov	r1, r8
 80057d6:	4638      	mov	r0, r7
 80057d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057dc:	47c8      	blx	r9
 80057de:	3001      	adds	r0, #1
 80057e0:	d023      	beq.n	800582a <_printf_common+0xae>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	6922      	ldr	r2, [r4, #16]
 80057e6:	f003 0306 	and.w	r3, r3, #6
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	bf14      	ite	ne
 80057ee:	2500      	movne	r5, #0
 80057f0:	6833      	ldreq	r3, [r6, #0]
 80057f2:	f04f 0600 	mov.w	r6, #0
 80057f6:	bf08      	it	eq
 80057f8:	68e5      	ldreq	r5, [r4, #12]
 80057fa:	f104 041a 	add.w	r4, r4, #26
 80057fe:	bf08      	it	eq
 8005800:	1aed      	subeq	r5, r5, r3
 8005802:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005806:	bf08      	it	eq
 8005808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800580c:	4293      	cmp	r3, r2
 800580e:	bfc4      	itt	gt
 8005810:	1a9b      	subgt	r3, r3, r2
 8005812:	18ed      	addgt	r5, r5, r3
 8005814:	42b5      	cmp	r5, r6
 8005816:	d11a      	bne.n	800584e <_printf_common+0xd2>
 8005818:	2000      	movs	r0, #0
 800581a:	e008      	b.n	800582e <_printf_common+0xb2>
 800581c:	2301      	movs	r3, #1
 800581e:	4652      	mov	r2, sl
 8005820:	4641      	mov	r1, r8
 8005822:	4638      	mov	r0, r7
 8005824:	47c8      	blx	r9
 8005826:	3001      	adds	r0, #1
 8005828:	d103      	bne.n	8005832 <_printf_common+0xb6>
 800582a:	f04f 30ff 	mov.w	r0, #4294967295
 800582e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005832:	3501      	adds	r5, #1
 8005834:	e7c1      	b.n	80057ba <_printf_common+0x3e>
 8005836:	2030      	movs	r0, #48	@ 0x30
 8005838:	18e1      	adds	r1, r4, r3
 800583a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800583e:	1c5a      	adds	r2, r3, #1
 8005840:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005844:	4422      	add	r2, r4
 8005846:	3302      	adds	r3, #2
 8005848:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800584c:	e7c2      	b.n	80057d4 <_printf_common+0x58>
 800584e:	2301      	movs	r3, #1
 8005850:	4622      	mov	r2, r4
 8005852:	4641      	mov	r1, r8
 8005854:	4638      	mov	r0, r7
 8005856:	47c8      	blx	r9
 8005858:	3001      	adds	r0, #1
 800585a:	d0e6      	beq.n	800582a <_printf_common+0xae>
 800585c:	3601      	adds	r6, #1
 800585e:	e7d9      	b.n	8005814 <_printf_common+0x98>

08005860 <_printf_i>:
 8005860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	7e0f      	ldrb	r7, [r1, #24]
 8005866:	4691      	mov	r9, r2
 8005868:	2f78      	cmp	r7, #120	@ 0x78
 800586a:	4680      	mov	r8, r0
 800586c:	460c      	mov	r4, r1
 800586e:	469a      	mov	sl, r3
 8005870:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005872:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005876:	d807      	bhi.n	8005888 <_printf_i+0x28>
 8005878:	2f62      	cmp	r7, #98	@ 0x62
 800587a:	d80a      	bhi.n	8005892 <_printf_i+0x32>
 800587c:	2f00      	cmp	r7, #0
 800587e:	f000 80d3 	beq.w	8005a28 <_printf_i+0x1c8>
 8005882:	2f58      	cmp	r7, #88	@ 0x58
 8005884:	f000 80ba 	beq.w	80059fc <_printf_i+0x19c>
 8005888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800588c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005890:	e03a      	b.n	8005908 <_printf_i+0xa8>
 8005892:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005896:	2b15      	cmp	r3, #21
 8005898:	d8f6      	bhi.n	8005888 <_printf_i+0x28>
 800589a:	a101      	add	r1, pc, #4	@ (adr r1, 80058a0 <_printf_i+0x40>)
 800589c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058a0:	080058f9 	.word	0x080058f9
 80058a4:	0800590d 	.word	0x0800590d
 80058a8:	08005889 	.word	0x08005889
 80058ac:	08005889 	.word	0x08005889
 80058b0:	08005889 	.word	0x08005889
 80058b4:	08005889 	.word	0x08005889
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005889 	.word	0x08005889
 80058c0:	08005889 	.word	0x08005889
 80058c4:	08005889 	.word	0x08005889
 80058c8:	08005889 	.word	0x08005889
 80058cc:	08005a0f 	.word	0x08005a0f
 80058d0:	08005937 	.word	0x08005937
 80058d4:	080059c9 	.word	0x080059c9
 80058d8:	08005889 	.word	0x08005889
 80058dc:	08005889 	.word	0x08005889
 80058e0:	08005a31 	.word	0x08005a31
 80058e4:	08005889 	.word	0x08005889
 80058e8:	08005937 	.word	0x08005937
 80058ec:	08005889 	.word	0x08005889
 80058f0:	08005889 	.word	0x08005889
 80058f4:	080059d1 	.word	0x080059d1
 80058f8:	6833      	ldr	r3, [r6, #0]
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6032      	str	r2, [r6, #0]
 8005900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005904:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005908:	2301      	movs	r3, #1
 800590a:	e09e      	b.n	8005a4a <_printf_i+0x1ea>
 800590c:	6833      	ldr	r3, [r6, #0]
 800590e:	6820      	ldr	r0, [r4, #0]
 8005910:	1d19      	adds	r1, r3, #4
 8005912:	6031      	str	r1, [r6, #0]
 8005914:	0606      	lsls	r6, r0, #24
 8005916:	d501      	bpl.n	800591c <_printf_i+0xbc>
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	e003      	b.n	8005924 <_printf_i+0xc4>
 800591c:	0645      	lsls	r5, r0, #25
 800591e:	d5fb      	bpl.n	8005918 <_printf_i+0xb8>
 8005920:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005924:	2d00      	cmp	r5, #0
 8005926:	da03      	bge.n	8005930 <_printf_i+0xd0>
 8005928:	232d      	movs	r3, #45	@ 0x2d
 800592a:	426d      	negs	r5, r5
 800592c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005930:	230a      	movs	r3, #10
 8005932:	4859      	ldr	r0, [pc, #356]	@ (8005a98 <_printf_i+0x238>)
 8005934:	e011      	b.n	800595a <_printf_i+0xfa>
 8005936:	6821      	ldr	r1, [r4, #0]
 8005938:	6833      	ldr	r3, [r6, #0]
 800593a:	0608      	lsls	r0, r1, #24
 800593c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005940:	d402      	bmi.n	8005948 <_printf_i+0xe8>
 8005942:	0649      	lsls	r1, r1, #25
 8005944:	bf48      	it	mi
 8005946:	b2ad      	uxthmi	r5, r5
 8005948:	2f6f      	cmp	r7, #111	@ 0x6f
 800594a:	6033      	str	r3, [r6, #0]
 800594c:	bf14      	ite	ne
 800594e:	230a      	movne	r3, #10
 8005950:	2308      	moveq	r3, #8
 8005952:	4851      	ldr	r0, [pc, #324]	@ (8005a98 <_printf_i+0x238>)
 8005954:	2100      	movs	r1, #0
 8005956:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800595a:	6866      	ldr	r6, [r4, #4]
 800595c:	2e00      	cmp	r6, #0
 800595e:	bfa8      	it	ge
 8005960:	6821      	ldrge	r1, [r4, #0]
 8005962:	60a6      	str	r6, [r4, #8]
 8005964:	bfa4      	itt	ge
 8005966:	f021 0104 	bicge.w	r1, r1, #4
 800596a:	6021      	strge	r1, [r4, #0]
 800596c:	b90d      	cbnz	r5, 8005972 <_printf_i+0x112>
 800596e:	2e00      	cmp	r6, #0
 8005970:	d04b      	beq.n	8005a0a <_printf_i+0x1aa>
 8005972:	4616      	mov	r6, r2
 8005974:	fbb5 f1f3 	udiv	r1, r5, r3
 8005978:	fb03 5711 	mls	r7, r3, r1, r5
 800597c:	5dc7      	ldrb	r7, [r0, r7]
 800597e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005982:	462f      	mov	r7, r5
 8005984:	42bb      	cmp	r3, r7
 8005986:	460d      	mov	r5, r1
 8005988:	d9f4      	bls.n	8005974 <_printf_i+0x114>
 800598a:	2b08      	cmp	r3, #8
 800598c:	d10b      	bne.n	80059a6 <_printf_i+0x146>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	07df      	lsls	r7, r3, #31
 8005992:	d508      	bpl.n	80059a6 <_printf_i+0x146>
 8005994:	6923      	ldr	r3, [r4, #16]
 8005996:	6861      	ldr	r1, [r4, #4]
 8005998:	4299      	cmp	r1, r3
 800599a:	bfde      	ittt	le
 800599c:	2330      	movle	r3, #48	@ 0x30
 800599e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80059a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80059a6:	1b92      	subs	r2, r2, r6
 80059a8:	6122      	str	r2, [r4, #16]
 80059aa:	464b      	mov	r3, r9
 80059ac:	4621      	mov	r1, r4
 80059ae:	4640      	mov	r0, r8
 80059b0:	f8cd a000 	str.w	sl, [sp]
 80059b4:	aa03      	add	r2, sp, #12
 80059b6:	f7ff fee1 	bl	800577c <_printf_common>
 80059ba:	3001      	adds	r0, #1
 80059bc:	d14a      	bne.n	8005a54 <_printf_i+0x1f4>
 80059be:	f04f 30ff 	mov.w	r0, #4294967295
 80059c2:	b004      	add	sp, #16
 80059c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c8:	6823      	ldr	r3, [r4, #0]
 80059ca:	f043 0320 	orr.w	r3, r3, #32
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	2778      	movs	r7, #120	@ 0x78
 80059d2:	4832      	ldr	r0, [pc, #200]	@ (8005a9c <_printf_i+0x23c>)
 80059d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	6831      	ldr	r1, [r6, #0]
 80059dc:	061f      	lsls	r7, r3, #24
 80059de:	f851 5b04 	ldr.w	r5, [r1], #4
 80059e2:	d402      	bmi.n	80059ea <_printf_i+0x18a>
 80059e4:	065f      	lsls	r7, r3, #25
 80059e6:	bf48      	it	mi
 80059e8:	b2ad      	uxthmi	r5, r5
 80059ea:	6031      	str	r1, [r6, #0]
 80059ec:	07d9      	lsls	r1, r3, #31
 80059ee:	bf44      	itt	mi
 80059f0:	f043 0320 	orrmi.w	r3, r3, #32
 80059f4:	6023      	strmi	r3, [r4, #0]
 80059f6:	b11d      	cbz	r5, 8005a00 <_printf_i+0x1a0>
 80059f8:	2310      	movs	r3, #16
 80059fa:	e7ab      	b.n	8005954 <_printf_i+0xf4>
 80059fc:	4826      	ldr	r0, [pc, #152]	@ (8005a98 <_printf_i+0x238>)
 80059fe:	e7e9      	b.n	80059d4 <_printf_i+0x174>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	f023 0320 	bic.w	r3, r3, #32
 8005a06:	6023      	str	r3, [r4, #0]
 8005a08:	e7f6      	b.n	80059f8 <_printf_i+0x198>
 8005a0a:	4616      	mov	r6, r2
 8005a0c:	e7bd      	b.n	800598a <_printf_i+0x12a>
 8005a0e:	6833      	ldr	r3, [r6, #0]
 8005a10:	6825      	ldr	r5, [r4, #0]
 8005a12:	1d18      	adds	r0, r3, #4
 8005a14:	6961      	ldr	r1, [r4, #20]
 8005a16:	6030      	str	r0, [r6, #0]
 8005a18:	062e      	lsls	r6, r5, #24
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	d501      	bpl.n	8005a22 <_printf_i+0x1c2>
 8005a1e:	6019      	str	r1, [r3, #0]
 8005a20:	e002      	b.n	8005a28 <_printf_i+0x1c8>
 8005a22:	0668      	lsls	r0, r5, #25
 8005a24:	d5fb      	bpl.n	8005a1e <_printf_i+0x1be>
 8005a26:	8019      	strh	r1, [r3, #0]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	4616      	mov	r6, r2
 8005a2c:	6123      	str	r3, [r4, #16]
 8005a2e:	e7bc      	b.n	80059aa <_printf_i+0x14a>
 8005a30:	6833      	ldr	r3, [r6, #0]
 8005a32:	2100      	movs	r1, #0
 8005a34:	1d1a      	adds	r2, r3, #4
 8005a36:	6032      	str	r2, [r6, #0]
 8005a38:	681e      	ldr	r6, [r3, #0]
 8005a3a:	6862      	ldr	r2, [r4, #4]
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	f000 f849 	bl	8005ad4 <memchr>
 8005a42:	b108      	cbz	r0, 8005a48 <_printf_i+0x1e8>
 8005a44:	1b80      	subs	r0, r0, r6
 8005a46:	6060      	str	r0, [r4, #4]
 8005a48:	6863      	ldr	r3, [r4, #4]
 8005a4a:	6123      	str	r3, [r4, #16]
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a52:	e7aa      	b.n	80059aa <_printf_i+0x14a>
 8005a54:	4632      	mov	r2, r6
 8005a56:	4649      	mov	r1, r9
 8005a58:	4640      	mov	r0, r8
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	47d0      	blx	sl
 8005a5e:	3001      	adds	r0, #1
 8005a60:	d0ad      	beq.n	80059be <_printf_i+0x15e>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	079b      	lsls	r3, r3, #30
 8005a66:	d413      	bmi.n	8005a90 <_printf_i+0x230>
 8005a68:	68e0      	ldr	r0, [r4, #12]
 8005a6a:	9b03      	ldr	r3, [sp, #12]
 8005a6c:	4298      	cmp	r0, r3
 8005a6e:	bfb8      	it	lt
 8005a70:	4618      	movlt	r0, r3
 8005a72:	e7a6      	b.n	80059c2 <_printf_i+0x162>
 8005a74:	2301      	movs	r3, #1
 8005a76:	4632      	mov	r2, r6
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	47d0      	blx	sl
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d09d      	beq.n	80059be <_printf_i+0x15e>
 8005a82:	3501      	adds	r5, #1
 8005a84:	68e3      	ldr	r3, [r4, #12]
 8005a86:	9903      	ldr	r1, [sp, #12]
 8005a88:	1a5b      	subs	r3, r3, r1
 8005a8a:	42ab      	cmp	r3, r5
 8005a8c:	dcf2      	bgt.n	8005a74 <_printf_i+0x214>
 8005a8e:	e7eb      	b.n	8005a68 <_printf_i+0x208>
 8005a90:	2500      	movs	r5, #0
 8005a92:	f104 0619 	add.w	r6, r4, #25
 8005a96:	e7f5      	b.n	8005a84 <_printf_i+0x224>
 8005a98:	08005c13 	.word	0x08005c13
 8005a9c:	08005c24 	.word	0x08005c24

08005aa0 <memmove>:
 8005aa0:	4288      	cmp	r0, r1
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	eb01 0402 	add.w	r4, r1, r2
 8005aa8:	d902      	bls.n	8005ab0 <memmove+0x10>
 8005aaa:	4284      	cmp	r4, r0
 8005aac:	4623      	mov	r3, r4
 8005aae:	d807      	bhi.n	8005ac0 <memmove+0x20>
 8005ab0:	1e43      	subs	r3, r0, #1
 8005ab2:	42a1      	cmp	r1, r4
 8005ab4:	d008      	beq.n	8005ac8 <memmove+0x28>
 8005ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005abe:	e7f8      	b.n	8005ab2 <memmove+0x12>
 8005ac0:	4601      	mov	r1, r0
 8005ac2:	4402      	add	r2, r0
 8005ac4:	428a      	cmp	r2, r1
 8005ac6:	d100      	bne.n	8005aca <memmove+0x2a>
 8005ac8:	bd10      	pop	{r4, pc}
 8005aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ad2:	e7f7      	b.n	8005ac4 <memmove+0x24>

08005ad4 <memchr>:
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	b2c9      	uxtb	r1, r1
 8005ada:	4402      	add	r2, r0
 8005adc:	4293      	cmp	r3, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	d101      	bne.n	8005ae6 <memchr+0x12>
 8005ae2:	2000      	movs	r0, #0
 8005ae4:	e003      	b.n	8005aee <memchr+0x1a>
 8005ae6:	7804      	ldrb	r4, [r0, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	428c      	cmp	r4, r1
 8005aec:	d1f6      	bne.n	8005adc <memchr+0x8>
 8005aee:	bd10      	pop	{r4, pc}

08005af0 <memcpy>:
 8005af0:	440a      	add	r2, r1
 8005af2:	4291      	cmp	r1, r2
 8005af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005af8:	d100      	bne.n	8005afc <memcpy+0xc>
 8005afa:	4770      	bx	lr
 8005afc:	b510      	push	{r4, lr}
 8005afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b02:	4291      	cmp	r1, r2
 8005b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b08:	d1f9      	bne.n	8005afe <memcpy+0xe>
 8005b0a:	bd10      	pop	{r4, pc}

08005b0c <_realloc_r>:
 8005b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b10:	4680      	mov	r8, r0
 8005b12:	4615      	mov	r5, r2
 8005b14:	460c      	mov	r4, r1
 8005b16:	b921      	cbnz	r1, 8005b22 <_realloc_r+0x16>
 8005b18:	4611      	mov	r1, r2
 8005b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1e:	f7ff bb9d 	b.w	800525c <_malloc_r>
 8005b22:	b92a      	cbnz	r2, 8005b30 <_realloc_r+0x24>
 8005b24:	f7ff fc8a 	bl	800543c <_free_r>
 8005b28:	2400      	movs	r4, #0
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b30:	f000 f81a 	bl	8005b68 <_malloc_usable_size_r>
 8005b34:	4285      	cmp	r5, r0
 8005b36:	4606      	mov	r6, r0
 8005b38:	d802      	bhi.n	8005b40 <_realloc_r+0x34>
 8005b3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b3e:	d8f4      	bhi.n	8005b2a <_realloc_r+0x1e>
 8005b40:	4629      	mov	r1, r5
 8005b42:	4640      	mov	r0, r8
 8005b44:	f7ff fb8a 	bl	800525c <_malloc_r>
 8005b48:	4607      	mov	r7, r0
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d0ec      	beq.n	8005b28 <_realloc_r+0x1c>
 8005b4e:	42b5      	cmp	r5, r6
 8005b50:	462a      	mov	r2, r5
 8005b52:	4621      	mov	r1, r4
 8005b54:	bf28      	it	cs
 8005b56:	4632      	movcs	r2, r6
 8005b58:	f7ff ffca 	bl	8005af0 <memcpy>
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	4640      	mov	r0, r8
 8005b60:	f7ff fc6c 	bl	800543c <_free_r>
 8005b64:	463c      	mov	r4, r7
 8005b66:	e7e0      	b.n	8005b2a <_realloc_r+0x1e>

08005b68 <_malloc_usable_size_r>:
 8005b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b6c:	1f18      	subs	r0, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	bfbc      	itt	lt
 8005b72:	580b      	ldrlt	r3, [r1, r0]
 8005b74:	18c0      	addlt	r0, r0, r3
 8005b76:	4770      	bx	lr

08005b78 <_init>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr

08005b84 <_fini>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr
